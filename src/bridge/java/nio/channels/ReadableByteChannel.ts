import { importClass, JavaClass } from "java-bridge";
import { ByteBuffer as java_nio_ByteBuffer } from "./../ByteBuffer";

/**
 * This class just defines types, you should import ReadableByteChannel instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ReadableByteChannelClass extends JavaClass {
    // ================== Method read ==================
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    public read(var0: java_nio_ByteBuffer | null): Promise<number>;
    // ================== Method read ==================
    /**
     * @param var0 original type: 'java.nio.ByteBuffer'
     * @return original return type: 'int'
     */
    public readSync(var0: java_nio_ByteBuffer | null): number;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public close(): Promise<void>;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public closeSync(): void;
    // ================== Method isOpen ==================
    /**
     * @return original return type: 'boolean'
     */
    public isOpen(): Promise<boolean>;
    // ================== Method isOpen ==================
    /**
     * @return original return type: 'boolean'
     */
    public isOpenSync(): boolean;
}

/**
 * Class java.nio.channels.ReadableByteChannel.
 *
 * This actually imports the java class for further use.
 * The class ReadableByteChannelClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class ReadableByteChannel extends importClass<typeof ReadableByteChannelClass>("java.nio.channels.ReadableByteChannel") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default ReadableByteChannel;