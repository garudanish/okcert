import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { WatchService as java_nio_file_WatchService } from "./WatchService";
import { Set as java_util_Set } from "./../../util/Set";
import { Iterable as java_lang_Iterable } from "./../../lang/Iterable";
import { PathMatcher as java_nio_file_PathMatcher } from "./PathMatcher";
import { UserPrincipalLookupService as java_nio_file_attribute_UserPrincipalLookupService } from "./attribute/UserPrincipalLookupService";
import { FileSystemProvider as java_nio_file_spi_FileSystemProvider } from "./spi/FileSystemProvider";
import { Path as java_nio_file_Path } from "./Path";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Class as java_lang_Class } from "./../../lang/Class";

/**
 * This class just defines types, you should import FileSystem instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class FileSystemClass extends JavaClass {
    // ================== Method newWatchService ==================
    /**
     * @return original return type: 'java.nio.file.WatchService'
     */
    public newWatchService(): Promise<java_nio_file_WatchService | null>;
    // ================== Method newWatchService ==================
    /**
     * @return original return type: 'java.nio.file.WatchService'
     */
    public newWatchServiceSync(): java_nio_file_WatchService | null;
    // ================== Method supportedFileAttributeViews ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public supportedFileAttributeViews(): Promise<java_util_Set | null>;
    // ================== Method supportedFileAttributeViews ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public supportedFileAttributeViewsSync(): java_util_Set | null;
    // ================== Method getRootDirectories ==================
    /**
     * @return original return type: 'java.lang.Iterable'
     */
    public getRootDirectories(): Promise<java_lang_Iterable | null>;
    // ================== Method getRootDirectories ==================
    /**
     * @return original return type: 'java.lang.Iterable'
     */
    public getRootDirectoriesSync(): java_lang_Iterable | null;
    // ================== Method getFileStores ==================
    /**
     * @return original return type: 'java.lang.Iterable'
     */
    public getFileStores(): Promise<java_lang_Iterable | null>;
    // ================== Method getFileStores ==================
    /**
     * @return original return type: 'java.lang.Iterable'
     */
    public getFileStoresSync(): java_lang_Iterable | null;
    // ================== Method getPathMatcher ==================
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.PathMatcher'
     */
    public getPathMatcher(var0: string | null): Promise<java_nio_file_PathMatcher | null>;
    // ================== Method getPathMatcher ==================
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.nio.file.PathMatcher'
     */
    public getPathMatcherSync(var0: string | null): java_nio_file_PathMatcher | null;
    // ================== Method getUserPrincipalLookupService ==================
    /**
     * @return original return type: 'java.nio.file.attribute.UserPrincipalLookupService'
     */
    public getUserPrincipalLookupService(): Promise<java_nio_file_attribute_UserPrincipalLookupService | null>;
    // ================== Method getUserPrincipalLookupService ==================
    /**
     * @return original return type: 'java.nio.file.attribute.UserPrincipalLookupService'
     */
    public getUserPrincipalLookupServiceSync(): java_nio_file_attribute_UserPrincipalLookupService | null;
    // ================== Method provider ==================
    /**
     * @return original return type: 'java.nio.file.spi.FileSystemProvider'
     */
    public provider(): Promise<java_nio_file_spi_FileSystemProvider | null>;
    // ================== Method provider ==================
    /**
     * @return original return type: 'java.nio.file.spi.FileSystemProvider'
     */
    public providerSync(): java_nio_file_spi_FileSystemProvider | null;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public close(): Promise<void>;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public closeSync(): void;
    // ================== Method getPath ==================
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String[]'
     * @return original return type: 'java.nio.file.Path'
     */
    public getPath(var0: string | null, var1: (string | null)[] | null): Promise<java_nio_file_Path | null>;
    // ================== Method getPath ==================
    /**
     * @param var0 original type: 'java.lang.String'
     * @param var1 original type: 'java.lang.String[]'
     * @return original return type: 'java.nio.file.Path'
     */
    public getPathSync(var0: string | null, var1: (string | null)[] | null): java_nio_file_Path | null;
    // ================== Method getSeparator ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getSeparator(): Promise<string | null>;
    // ================== Method getSeparator ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getSeparatorSync(): string | null;
    // ================== Method isReadOnly ==================
    /**
     * @return original return type: 'boolean'
     */
    public isReadOnly(): Promise<boolean>;
    // ================== Method isReadOnly ==================
    /**
     * @return original return type: 'boolean'
     */
    public isReadOnlySync(): boolean;
    // ================== Method isOpen ==================
    /**
     * @return original return type: 'boolean'
     */
    public isOpen(): Promise<boolean>;
    // ================== Method isOpen ==================
    /**
     * @return original return type: 'boolean'
     */
    public isOpenSync(): boolean;
    // ================== Method wait ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    // ================== Method wait ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'void'
     */
    public wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    public waitSync(): void;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equals(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equalsSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method toString ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public toString(): Promise<string>;
    // ================== Method toString ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public toStringSync(): string;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCode(): Promise<number>;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCodeSync(): number;
    // ================== Method getClass ==================
    /**
     * @return original return type: 'java.lang.Class'
     */
    public getClass(): Promise<java_lang_Class>;
    // ================== Method getClass ==================
    /**
     * @return original return type: 'java.lang.Class'
     */
    public getClassSync(): java_lang_Class;
    // ================== Method notify ==================
    /**
     * @return original return type: 'void'
     */
    public notify(): Promise<void>;
    // ================== Method notify ==================
    /**
     * @return original return type: 'void'
     */
    public notifySync(): void;
    // ================== Method notifyAll ==================
    /**
     * @return original return type: 'void'
     */
    public notifyAll(): Promise<void>;
    // ================== Method notifyAll ==================
    /**
     * @return original return type: 'void'
     */
    public notifyAllSync(): void;
}

/**
 * Class java.nio.file.FileSystem.
 *
 * This actually imports the java class for further use.
 * The class FileSystemClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class FileSystem extends importClass<typeof FileSystemClass>("java.nio.file.FileSystem") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default FileSystem;