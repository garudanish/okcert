import { importClass, JavaClass } from "java-bridge";
import { ProtectionDomain as java_security_ProtectionDomain } from "./ProtectionDomain";

/**
 * This class just defines types, you should import DomainCombiner instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DomainCombinerClass extends JavaClass {
    // ================== Method combine ==================
    /**
     * @param var0 original type: 'java.security.ProtectionDomain[]'
     * @param var1 original type: 'java.security.ProtectionDomain[]'
     * @return original return type: 'java.security.ProtectionDomain[]'
     */
    public combine(var0: (java_security_ProtectionDomain | null)[] | null, var1: (java_security_ProtectionDomain | null)[] | null): Promise<(java_security_ProtectionDomain | null)[] | null>;
    // ================== Method combine ==================
    /**
     * @param var0 original type: 'java.security.ProtectionDomain[]'
     * @param var1 original type: 'java.security.ProtectionDomain[]'
     * @return original return type: 'java.security.ProtectionDomain[]'
     */
    public combineSync(var0: (java_security_ProtectionDomain | null)[] | null, var1: (java_security_ProtectionDomain | null)[] | null): (java_security_ProtectionDomain | null)[] | null;
}

/**
 * Class java.security.DomainCombiner.
 *
 * This actually imports the java class for further use.
 * The class DomainCombinerClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class DomainCombiner extends importClass<typeof DomainCombinerClass>("java.security.DomainCombiner") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default DomainCombiner;