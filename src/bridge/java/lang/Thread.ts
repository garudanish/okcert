import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./Integer";
import { Long as java_lang_Long } from "./Long";
import { ThreadGroup as java_lang_ThreadGroup } from "./ThreadGroup";
import { StackTraceElement as java_lang_StackTraceElement } from "./StackTraceElement";
import { Boolean as java_lang_Boolean } from "./Boolean";
import { Throwable as java_lang_Throwable } from "./Throwable";
import { ClassLoader as java_lang_ClassLoader } from "./ClassLoader";
import { Map as java_util_Map } from "./../util/Map";
import { Thread$State as java_lang_Thread$State } from "./Thread$State";
import { Thread$UncaughtExceptionHandler as java_lang_Thread$UncaughtExceptionHandler } from "./Thread$UncaughtExceptionHandler";
import { Class as java_lang_Class } from "./Class";
import { Runnable as java_lang_Runnable } from "./Runnable";

/**
 * This class just defines types, you should import Thread instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ThreadClass extends JavaClass {
    // ================== Field MIN_PRIORITY ==================
    /**
     * Original type: 'int'
     */
    public static readonly MIN_PRIORITY: java_lang_Integer | number;
    // ================== Field NORM_PRIORITY ==================
    /**
     * Original type: 'int'
     */
    public static readonly NORM_PRIORITY: java_lang_Integer | number;
    // ================== Field MAX_PRIORITY ==================
    /**
     * Original type: 'int'
     */
    public static readonly MAX_PRIORITY: java_lang_Integer | number;
    // ================== Method run ==================
    /**
     * @return original return type: 'void'
     */
    public run(): Promise<void>;
    // ================== Method run ==================
    /**
     * @return original return type: 'void'
     */
    public runSync(): void;
    // ================== Method toString ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public toString(): Promise<string>;
    // ================== Method toString ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public toStringSync(): string;
    // ================== Method isInterrupted ==================
    /**
     * @return original return type: 'boolean'
     */
    public isInterrupted(): Promise<boolean>;
    // ================== Method isInterrupted ==================
    /**
     * @return original return type: 'boolean'
     */
    public isInterruptedSync(): boolean;
    // ================== Method currentThread ==================
    /**
     * @return original return type: 'java.lang.Thread'
     */
    public static currentThread(): Promise<Thread | null>;
    // ================== Method currentThread ==================
    /**
     * @return original return type: 'java.lang.Thread'
     */
    public static currentThreadSync(): Thread | null;
    // ================== Method getName ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getName(): Promise<string | null>;
    // ================== Method getName ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getNameSync(): string | null;
    // ================== Method join ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public join(var0: java_lang_Long | bigint | number): Promise<void>;
    // ================== Method join ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public joinSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public join(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public joinSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @return original return type: 'void'
     */
    public join(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    public joinSync(): void;
    // ================== Method getThreadGroup ==================
    /**
     * @return original return type: 'java.lang.ThreadGroup'
     */
    public getThreadGroup(): Promise<java_lang_ThreadGroup | null>;
    // ================== Method getThreadGroup ==================
    /**
     * @return original return type: 'java.lang.ThreadGroup'
     */
    public getThreadGroupSync(): java_lang_ThreadGroup | null;
    // ================== Method getStackTrace ==================
    /**
     * @return original return type: 'java.lang.StackTraceElement[]'
     */
    public getStackTrace(): Promise<(java_lang_StackTraceElement | null)[] | null>;
    // ================== Method getStackTrace ==================
    /**
     * @return original return type: 'java.lang.StackTraceElement[]'
     */
    public getStackTraceSync(): (java_lang_StackTraceElement | null)[] | null;
    // ================== Method holdsLock ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public static holdsLock(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method holdsLock ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public static holdsLockSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method checkAccess ==================
    /**
     * @return original return type: 'void'
     */
    public checkAccess(): Promise<void>;
    // ================== Method checkAccess ==================
    /**
     * @return original return type: 'void'
     */
    public checkAccessSync(): void;
    // ================== Method dumpStack ==================
    /**
     * @return original return type: 'void'
     */
    public static dumpStack(): Promise<void>;
    // ================== Method dumpStack ==================
    /**
     * @return original return type: 'void'
     */
    public static dumpStackSync(): void;
    // ================== Method yield ==================
    /**
     * @return original return type: 'void'
     */
    public static yield(): Promise<void>;
    // ================== Method yield ==================
    /**
     * @return original return type: 'void'
     */
    public static yieldSync(): void;
    // ================== Method setPriority ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    public setPriority(var0: java_lang_Integer | number): Promise<void>;
    // ================== Method setPriority ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'void'
     */
    public setPrioritySync(var0: java_lang_Integer | number): void;
    // ================== Method setDaemon ==================
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    public setDaemon(var0: java_lang_Boolean | boolean): Promise<void>;
    // ================== Method setDaemon ==================
    /**
     * @param var0 original type: 'boolean'
     * @return original return type: 'void'
     */
    public setDaemonSync(var0: java_lang_Boolean | boolean): void;
    // ================== Method start ==================
    /**
     * @return original return type: 'void'
     */
    public start(): Promise<void>;
    // ================== Method start ==================
    /**
     * @return original return type: 'void'
     */
    public startSync(): void;
    // ================== Method sleep ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public static sleep(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    // ================== Method sleep ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public static sleepSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public static sleep(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public static sleepSync(var0: java_lang_Long | bigint | number): void;
    // ================== Method stop ==================
    /**
     * @return original return type: 'void'
     */
    public stop(): Promise<void>;
    // ================== Method stop ==================
    /**
     * @return original return type: 'void'
     */
    public stopSync(): void;
    /**
     * @param var0 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    public stop(var0: java_lang_Throwable | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Throwable'
     * @return original return type: 'void'
     */
    public stopSync(var0: java_lang_Throwable | null): void;
    // ================== Method interrupt ==================
    /**
     * @return original return type: 'void'
     */
    public interrupt(): Promise<void>;
    // ================== Method interrupt ==================
    /**
     * @return original return type: 'void'
     */
    public interruptSync(): void;
    // ================== Method interrupted ==================
    /**
     * @return original return type: 'boolean'
     */
    public static interrupted(): Promise<boolean>;
    // ================== Method interrupted ==================
    /**
     * @return original return type: 'boolean'
     */
    public static interruptedSync(): boolean;
    // ================== Method destroy ==================
    /**
     * @return original return type: 'void'
     */
    public destroy(): Promise<void>;
    // ================== Method destroy ==================
    /**
     * @return original return type: 'void'
     */
    public destroySync(): void;
    // ================== Method isAlive ==================
    /**
     * @return original return type: 'boolean'
     */
    public isAlive(): Promise<boolean>;
    // ================== Method isAlive ==================
    /**
     * @return original return type: 'boolean'
     */
    public isAliveSync(): boolean;
    // ================== Method suspend ==================
    /**
     * @return original return type: 'void'
     */
    public suspend(): Promise<void>;
    // ================== Method suspend ==================
    /**
     * @return original return type: 'void'
     */
    public suspendSync(): void;
    // ================== Method resume ==================
    /**
     * @return original return type: 'void'
     */
    public resume(): Promise<void>;
    // ================== Method resume ==================
    /**
     * @return original return type: 'void'
     */
    public resumeSync(): void;
    // ================== Method getPriority ==================
    /**
     * @return original return type: 'int'
     */
    public getPriority(): Promise<number>;
    // ================== Method getPriority ==================
    /**
     * @return original return type: 'int'
     */
    public getPrioritySync(): number;
    // ================== Method setName ==================
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    public setName(var0: string | null): Promise<void>;
    // ================== Method setName ==================
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'void'
     */
    public setNameSync(var0: string | null): void;
    // ================== Method activeCount ==================
    /**
     * @return original return type: 'int'
     */
    public static activeCount(): Promise<number>;
    // ================== Method activeCount ==================
    /**
     * @return original return type: 'int'
     */
    public static activeCountSync(): number;
    // ================== Method enumerate ==================
    /**
     * @param var0 original type: 'java.lang.Thread[]'
     * @return original return type: 'int'
     */
    public static enumerate(var0: (ThreadClass | null)[] | null): Promise<number>;
    // ================== Method enumerate ==================
    /**
     * @param var0 original type: 'java.lang.Thread[]'
     * @return original return type: 'int'
     */
    public static enumerateSync(var0: (ThreadClass | null)[] | null): number;
    // ================== Method countStackFrames ==================
    /**
     * @return original return type: 'int'
     */
    public countStackFrames(): Promise<number>;
    // ================== Method countStackFrames ==================
    /**
     * @return original return type: 'int'
     */
    public countStackFramesSync(): number;
    // ================== Method isDaemon ==================
    /**
     * @return original return type: 'boolean'
     */
    public isDaemon(): Promise<boolean>;
    // ================== Method isDaemon ==================
    /**
     * @return original return type: 'boolean'
     */
    public isDaemonSync(): boolean;
    // ================== Method getContextClassLoader ==================
    /**
     * @return original return type: 'java.lang.ClassLoader'
     */
    public getContextClassLoader(): Promise<java_lang_ClassLoader | null>;
    // ================== Method getContextClassLoader ==================
    /**
     * @return original return type: 'java.lang.ClassLoader'
     */
    public getContextClassLoaderSync(): java_lang_ClassLoader | null;
    // ================== Method setContextClassLoader ==================
    /**
     * @param var0 original type: 'java.lang.ClassLoader'
     * @return original return type: 'void'
     */
    public setContextClassLoader(var0: java_lang_ClassLoader | null): Promise<void>;
    // ================== Method setContextClassLoader ==================
    /**
     * @param var0 original type: 'java.lang.ClassLoader'
     * @return original return type: 'void'
     */
    public setContextClassLoaderSync(var0: java_lang_ClassLoader | null): void;
    // ================== Method getAllStackTraces ==================
    /**
     * @return original return type: 'java.util.Map'
     */
    public static getAllStackTraces(): Promise<java_util_Map | null>;
    // ================== Method getAllStackTraces ==================
    /**
     * @return original return type: 'java.util.Map'
     */
    public static getAllStackTracesSync(): java_util_Map | null;
    // ================== Method getId ==================
    /**
     * @return original return type: 'long'
     */
    public getId(): Promise<number>;
    // ================== Method getId ==================
    /**
     * @return original return type: 'long'
     */
    public getIdSync(): number;
    // ================== Method getState ==================
    /**
     * @return original return type: 'java.lang.Thread$State'
     */
    public getState(): Promise<java_lang_Thread$State | null>;
    // ================== Method getState ==================
    /**
     * @return original return type: 'java.lang.Thread$State'
     */
    public getStateSync(): java_lang_Thread$State | null;
    // ================== Method setDefaultUncaughtExceptionHandler ==================
    /**
     * @param var0 original type: 'java.lang.Thread$UncaughtExceptionHandler'
     * @return original return type: 'void'
     */
    public static setDefaultUncaughtExceptionHandler(var0: java_lang_Thread$UncaughtExceptionHandler | null): Promise<void>;
    // ================== Method setDefaultUncaughtExceptionHandler ==================
    /**
     * @param var0 original type: 'java.lang.Thread$UncaughtExceptionHandler'
     * @return original return type: 'void'
     */
    public static setDefaultUncaughtExceptionHandlerSync(var0: java_lang_Thread$UncaughtExceptionHandler | null): void;
    // ================== Method getDefaultUncaughtExceptionHandler ==================
    /**
     * @return original return type: 'java.lang.Thread$UncaughtExceptionHandler'
     */
    public static getDefaultUncaughtExceptionHandler(): Promise<java_lang_Thread$UncaughtExceptionHandler | null>;
    // ================== Method getDefaultUncaughtExceptionHandler ==================
    /**
     * @return original return type: 'java.lang.Thread$UncaughtExceptionHandler'
     */
    public static getDefaultUncaughtExceptionHandlerSync(): java_lang_Thread$UncaughtExceptionHandler | null;
    // ================== Method getUncaughtExceptionHandler ==================
    /**
     * @return original return type: 'java.lang.Thread$UncaughtExceptionHandler'
     */
    public getUncaughtExceptionHandler(): Promise<java_lang_Thread$UncaughtExceptionHandler | null>;
    // ================== Method getUncaughtExceptionHandler ==================
    /**
     * @return original return type: 'java.lang.Thread$UncaughtExceptionHandler'
     */
    public getUncaughtExceptionHandlerSync(): java_lang_Thread$UncaughtExceptionHandler | null;
    // ================== Method setUncaughtExceptionHandler ==================
    /**
     * @param var0 original type: 'java.lang.Thread$UncaughtExceptionHandler'
     * @return original return type: 'void'
     */
    public setUncaughtExceptionHandler(var0: java_lang_Thread$UncaughtExceptionHandler | null): Promise<void>;
    // ================== Method setUncaughtExceptionHandler ==================
    /**
     * @param var0 original type: 'java.lang.Thread$UncaughtExceptionHandler'
     * @return original return type: 'void'
     */
    public setUncaughtExceptionHandlerSync(var0: java_lang_Thread$UncaughtExceptionHandler | null): void;
    // ================== Method wait ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    // ================== Method wait ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'void'
     */
    public wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    public waitSync(): void;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equals(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equalsSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCode(): Promise<number>;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCodeSync(): number;
    // ================== Method getClass ==================
    /**
     * @return original return type: 'java.lang.Class'
     */
    public getClass(): Promise<java_lang_Class>;
    // ================== Method getClass ==================
    /**
     * @return original return type: 'java.lang.Class'
     */
    public getClassSync(): java_lang_Class;
    // ================== Method notify ==================
    /**
     * @return original return type: 'void'
     */
    public notify(): Promise<void>;
    // ================== Method notify ==================
    /**
     * @return original return type: 'void'
     */
    public notifySync(): void;
    // ================== Method notifyAll ==================
    /**
     * @return original return type: 'void'
     */
    public notifyAll(): Promise<void>;
    // ================== Method notifyAll ==================
    /**
     * @return original return type: 'void'
     */
    public notifyAllSync(): void;
    // ================== Method newInstance ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.Thread'
     */
    public static newInstance(var0: java_lang_Runnable | null): Promise<Thread>;
    /**
     * @return original return type: 'java.lang.Thread'
     */
    public static newInstance(): Promise<Thread>;
    /**
     * @param var0 original type: 'java.lang.ThreadGroup'
     * @param var1 original type: 'java.lang.Runnable'
     * @param var2 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Thread'
     */
    public static newInstance(var0: java_lang_ThreadGroup | null, var1: java_lang_Runnable | null, var2: string | null): Promise<Thread>;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Thread'
     */
    public static newInstance(var0: java_lang_Runnable | null, var1: string | null): Promise<Thread>;
    /**
     * @param var0 original type: 'java.lang.ThreadGroup'
     * @param var1 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Thread'
     */
    public static newInstance(var0: java_lang_ThreadGroup | null, var1: string | null): Promise<Thread>;
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.lang.Thread'
     */
    public static newInstance(var0: string | null): Promise<Thread>;
    /**
     * @param var0 original type: 'java.lang.ThreadGroup'
     * @param var1 original type: 'java.lang.Runnable'
     * @return original return type: 'java.lang.Thread'
     */
    public static newInstance(var0: java_lang_ThreadGroup | null, var1: java_lang_Runnable | null): Promise<Thread>;
    /**
     * @param var0 original type: 'java.lang.ThreadGroup'
     * @param var1 original type: 'java.lang.Runnable'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'long'
     * @return original return type: 'java.lang.Thread'
     */
    public static newInstance(var0: java_lang_ThreadGroup | null, var1: java_lang_Runnable | null, var2: string | null, var3: java_lang_Long | bigint | number): Promise<Thread>;
    // ================== Constructors ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     */
    public constructor(var0: java_lang_Runnable | null);
    public constructor();
    /**
     * @param var0 original type: 'java.lang.ThreadGroup'
     * @param var1 original type: 'java.lang.Runnable'
     * @param var2 original type: 'java.lang.String'
     */
    public constructor(var0: java_lang_ThreadGroup | null, var1: java_lang_Runnable | null, var2: string | null);
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @param var1 original type: 'java.lang.String'
     */
    public constructor(var0: java_lang_Runnable | null, var1: string | null);
    /**
     * @param var0 original type: 'java.lang.ThreadGroup'
     * @param var1 original type: 'java.lang.String'
     */
    public constructor(var0: java_lang_ThreadGroup | null, var1: string | null);
    /**
     * @param var0 original type: 'java.lang.String'
     */
    public constructor(var0: string | null);
    /**
     * @param var0 original type: 'java.lang.ThreadGroup'
     * @param var1 original type: 'java.lang.Runnable'
     */
    public constructor(var0: java_lang_ThreadGroup | null, var1: java_lang_Runnable | null);
    /**
     * @param var0 original type: 'java.lang.ThreadGroup'
     * @param var1 original type: 'java.lang.Runnable'
     * @param var2 original type: 'java.lang.String'
     * @param var3 original type: 'long'
     */
    public constructor(var0: java_lang_ThreadGroup | null, var1: java_lang_Runnable | null, var2: string | null, var3: java_lang_Long | bigint | number);
}

/**
 * Class java.lang.Thread.
 *
 * This actually imports the java class for further use.
 * The class ThreadClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Thread extends importClass<typeof ThreadClass>("java.lang.Thread") {
}
export default Thread;