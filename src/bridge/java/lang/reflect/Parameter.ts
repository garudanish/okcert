import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { Annotation as java_lang_annotation_Annotation } from "./../annotation/Annotation";
import { Class as java_lang_Class } from "./../Class";
import { AnnotatedType as java_lang_reflect_AnnotatedType } from "./AnnotatedType";
import { Executable as java_lang_reflect_Executable } from "./Executable";
import { Type as java_lang_reflect_Type } from "./Type";
import { Long as java_lang_Long } from "./../Long";
import { Integer as java_lang_Integer } from "./../Integer";

/**
 * This class just defines types, you should import Parameter instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ParameterClass extends JavaClass {
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equals(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equalsSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method toString ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public toString(): Promise<string>;
    // ================== Method toString ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public toStringSync(): string;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCode(): Promise<number>;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCodeSync(): number;
    // ================== Method getModifiers ==================
    /**
     * @return original return type: 'int'
     */
    public getModifiers(): Promise<number>;
    // ================== Method getModifiers ==================
    /**
     * @return original return type: 'int'
     */
    public getModifiersSync(): number;
    // ================== Method getName ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getName(): Promise<string | null>;
    // ================== Method getName ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getNameSync(): string | null;
    // ================== Method isSynthetic ==================
    /**
     * @return original return type: 'boolean'
     */
    public isSynthetic(): Promise<boolean>;
    // ================== Method isSynthetic ==================
    /**
     * @return original return type: 'boolean'
     */
    public isSyntheticSync(): boolean;
    // ================== Method getAnnotation ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    public getAnnotation(var0: java_lang_Class | null): Promise<java_lang_annotation_Annotation | null>;
    // ================== Method getAnnotation ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    public getAnnotationSync(var0: java_lang_Class | null): java_lang_annotation_Annotation | null;
    // ================== Method getAnnotationsByType ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    public getAnnotationsByType(var0: java_lang_Class | null): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    // ================== Method getAnnotationsByType ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    public getAnnotationsByTypeSync(var0: java_lang_Class | null): (java_lang_annotation_Annotation | null)[] | null;
    // ================== Method getAnnotations ==================
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    public getAnnotations(): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    // ================== Method getAnnotations ==================
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    public getAnnotationsSync(): (java_lang_annotation_Annotation | null)[] | null;
    // ================== Method getDeclaredAnnotation ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    public getDeclaredAnnotation(var0: java_lang_Class | null): Promise<java_lang_annotation_Annotation | null>;
    // ================== Method getDeclaredAnnotation ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation'
     */
    public getDeclaredAnnotationSync(var0: java_lang_Class | null): java_lang_annotation_Annotation | null;
    // ================== Method getDeclaredAnnotationsByType ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    public getDeclaredAnnotationsByType(var0: java_lang_Class | null): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    // ================== Method getDeclaredAnnotationsByType ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    public getDeclaredAnnotationsByTypeSync(var0: java_lang_Class | null): (java_lang_annotation_Annotation | null)[] | null;
    // ================== Method getDeclaredAnnotations ==================
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    public getDeclaredAnnotations(): Promise<(java_lang_annotation_Annotation | null)[] | null>;
    // ================== Method getDeclaredAnnotations ==================
    /**
     * @return original return type: 'java.lang.annotation.Annotation[]'
     */
    public getDeclaredAnnotationsSync(): (java_lang_annotation_Annotation | null)[] | null;
    // ================== Method getType ==================
    /**
     * @return original return type: 'java.lang.Class'
     */
    public getType(): Promise<java_lang_Class | null>;
    // ================== Method getType ==================
    /**
     * @return original return type: 'java.lang.Class'
     */
    public getTypeSync(): java_lang_Class | null;
    // ================== Method getAnnotatedType ==================
    /**
     * @return original return type: 'java.lang.reflect.AnnotatedType'
     */
    public getAnnotatedType(): Promise<java_lang_reflect_AnnotatedType | null>;
    // ================== Method getAnnotatedType ==================
    /**
     * @return original return type: 'java.lang.reflect.AnnotatedType'
     */
    public getAnnotatedTypeSync(): java_lang_reflect_AnnotatedType | null;
    // ================== Method isNamePresent ==================
    /**
     * @return original return type: 'boolean'
     */
    public isNamePresent(): Promise<boolean>;
    // ================== Method isNamePresent ==================
    /**
     * @return original return type: 'boolean'
     */
    public isNamePresentSync(): boolean;
    // ================== Method getDeclaringExecutable ==================
    /**
     * @return original return type: 'java.lang.reflect.Executable'
     */
    public getDeclaringExecutable(): Promise<java_lang_reflect_Executable | null>;
    // ================== Method getDeclaringExecutable ==================
    /**
     * @return original return type: 'java.lang.reflect.Executable'
     */
    public getDeclaringExecutableSync(): java_lang_reflect_Executable | null;
    // ================== Method getParameterizedType ==================
    /**
     * @return original return type: 'java.lang.reflect.Type'
     */
    public getParameterizedType(): Promise<java_lang_reflect_Type | null>;
    // ================== Method getParameterizedType ==================
    /**
     * @return original return type: 'java.lang.reflect.Type'
     */
    public getParameterizedTypeSync(): java_lang_reflect_Type | null;
    // ================== Method isImplicit ==================
    /**
     * @return original return type: 'boolean'
     */
    public isImplicit(): Promise<boolean>;
    // ================== Method isImplicit ==================
    /**
     * @return original return type: 'boolean'
     */
    public isImplicitSync(): boolean;
    // ================== Method isVarArgs ==================
    /**
     * @return original return type: 'boolean'
     */
    public isVarArgs(): Promise<boolean>;
    // ================== Method isVarArgs ==================
    /**
     * @return original return type: 'boolean'
     */
    public isVarArgsSync(): boolean;
    // ================== Method wait ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public wait(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): Promise<void>;
    // ================== Method wait ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'int'
     * @return original return type: 'void'
     */
    public waitSync(var0: java_lang_Long | bigint | number, var1: java_lang_Integer | number): void;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public wait(var0: java_lang_Long | bigint | number): Promise<void>;
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'void'
     */
    public waitSync(var0: java_lang_Long | bigint | number): void;
    /**
     * @return original return type: 'void'
     */
    public wait(): Promise<void>;
    /**
     * @return original return type: 'void'
     */
    public waitSync(): void;
    // ================== Method getClass ==================
    /**
     * @return original return type: 'java.lang.Class'
     */
    public getClass(): Promise<java_lang_Class>;
    // ================== Method getClass ==================
    /**
     * @return original return type: 'java.lang.Class'
     */
    public getClassSync(): java_lang_Class;
    // ================== Method notify ==================
    /**
     * @return original return type: 'void'
     */
    public notify(): Promise<void>;
    // ================== Method notify ==================
    /**
     * @return original return type: 'void'
     */
    public notifySync(): void;
    // ================== Method notifyAll ==================
    /**
     * @return original return type: 'void'
     */
    public notifyAll(): Promise<void>;
    // ================== Method notifyAll ==================
    /**
     * @return original return type: 'void'
     */
    public notifyAllSync(): void;
    // ================== Method isAnnotationPresent ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    public isAnnotationPresent(var0: java_lang_Class | null): Promise<boolean>;
    // ================== Method isAnnotationPresent ==================
    /**
     * @param var0 original type: 'java.lang.Class'
     * @return original return type: 'boolean'
     */
    public isAnnotationPresentSync(var0: java_lang_Class | null): boolean;
}

/**
 * Class java.lang.reflect.Parameter.
 *
 * This actually imports the java class for further use.
 * The class ParameterClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Parameter extends importClass<typeof ParameterClass>("java.lang.reflect.Parameter") {
}
export default Parameter;