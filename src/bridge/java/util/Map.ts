import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { Collection as java_util_Collection } from "./Collection";
import { BiFunction as java_util_function_BiFunction } from "./function/BiFunction";
import { Set as java_util_Set } from "./Set";
import { BiConsumer as java_util_function_BiConsumer } from "./function/BiConsumer";
import { Function as java_util_function_Function } from "./function/Function";

/**
 * This class just defines types, you should import Map instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class MapClass extends JavaClass {
    // ================== Method remove ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public remove(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    // ================== Method remove ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public removeSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public remove(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public removeSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): boolean;
    // ================== Method get ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public get(var0: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    // ================== Method get ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public getSync(var0: BasicOrJavaType | null): BasicOrJavaType | null;
    // ================== Method put ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public put(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    // ================== Method put ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public putSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equals(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equalsSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method values ==================
    /**
     * @return original return type: 'java.util.Collection'
     */
    public values(): Promise<java_util_Collection | null>;
    // ================== Method values ==================
    /**
     * @return original return type: 'java.util.Collection'
     */
    public valuesSync(): java_util_Collection | null;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCode(): Promise<number>;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCodeSync(): number;
    // ================== Method clear ==================
    /**
     * @return original return type: 'void'
     */
    public clear(): Promise<void>;
    // ================== Method clear ==================
    /**
     * @return original return type: 'void'
     */
    public clearSync(): void;
    // ================== Method isEmpty ==================
    /**
     * @return original return type: 'boolean'
     */
    public isEmpty(): Promise<boolean>;
    // ================== Method isEmpty ==================
    /**
     * @return original return type: 'boolean'
     */
    public isEmptySync(): boolean;
    // ================== Method replace ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public replace(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    // ================== Method replace ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public replaceSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public replace(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public replaceSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: BasicOrJavaType | null): boolean;
    // ================== Method replaceAll ==================
    /**
     * @param var0 original type: 'java.util.function.BiFunction'
     * @return original return type: 'void'
     */
    public replaceAll(var0: java_util_function_BiFunction | null): Promise<void>;
    // ================== Method replaceAll ==================
    /**
     * @param var0 original type: 'java.util.function.BiFunction'
     * @return original return type: 'void'
     */
    public replaceAllSync(var0: java_util_function_BiFunction | null): void;
    // ================== Method size ==================
    /**
     * @return original return type: 'int'
     */
    public size(): Promise<number>;
    // ================== Method size ==================
    /**
     * @return original return type: 'int'
     */
    public sizeSync(): number;
    // ================== Method entrySet ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public entrySet(): Promise<java_util_Set | null>;
    // ================== Method entrySet ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public entrySetSync(): java_util_Set | null;
    // ================== Method putAll ==================
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'void'
     */
    public putAll(var0: MapClass | null): Promise<void>;
    // ================== Method putAll ==================
    /**
     * @param var0 original type: 'java.util.Map'
     * @return original return type: 'void'
     */
    public putAllSync(var0: MapClass | null): void;
    // ================== Method putIfAbsent ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public putIfAbsent(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    // ================== Method putIfAbsent ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public putIfAbsentSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    public forEach(var0: java_util_function_BiConsumer | null): Promise<void>;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'void'
     */
    public forEachSync(var0: java_util_function_BiConsumer | null): void;
    // ================== Method keySet ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public keySet(): Promise<java_util_Set | null>;
    // ================== Method keySet ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public keySetSync(): java_util_Set | null;
    // ================== Method containsValue ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public containsValue(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method containsValue ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public containsValueSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method containsKey ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public containsKey(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method containsKey ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public containsKeySync(var0: BasicOrJavaType | null): boolean;
    // ================== Method getOrDefault ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public getOrDefault(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    // ================== Method getOrDefault ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public getOrDefaultSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    // ================== Method computeIfAbsent ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    public computeIfAbsent(var0: BasicOrJavaType | null, var1: java_util_function_Function | null): Promise<BasicOrJavaType | null>;
    // ================== Method computeIfAbsent ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.Function'
     * @return original return type: 'java.lang.Object'
     */
    public computeIfAbsentSync(var0: BasicOrJavaType | null, var1: java_util_function_Function | null): BasicOrJavaType | null;
    // ================== Method computeIfPresent ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    public computeIfPresent(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | null): Promise<BasicOrJavaType | null>;
    // ================== Method computeIfPresent ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    public computeIfPresentSync(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | null): BasicOrJavaType | null;
    // ================== Method compute ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    public compute(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | null): Promise<BasicOrJavaType | null>;
    // ================== Method compute ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    public computeSync(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | null): BasicOrJavaType | null;
    // ================== Method merge ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    public merge(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: java_util_function_BiFunction | null): Promise<BasicOrJavaType | null>;
    // ================== Method merge ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.lang.Object'
     * @param var2 original type: 'java.util.function.BiFunction'
     * @return original return type: 'java.lang.Object'
     */
    public mergeSync(var0: BasicOrJavaType | null, var1: BasicOrJavaType | null, var2: java_util_function_BiFunction | null): BasicOrJavaType | null;
}

/**
 * Class java.util.Map.
 *
 * This actually imports the java class for further use.
 * The class MapClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Map extends importClass<typeof MapClass>("java.util.Map") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default Map;