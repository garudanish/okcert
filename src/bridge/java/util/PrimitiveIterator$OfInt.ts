import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { IntConsumer as java_util_function_IntConsumer } from "./function/IntConsumer";
import { Consumer as java_util_function_Consumer } from "./function/Consumer";

/**
 * This class just defines types, you should import PrimitiveIterator$OfInt instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PrimitiveIterator$OfIntClass extends JavaClass {
    // ================== Method next ==================
    /**
     * @return original return type: 'java.lang.Object'
     */
    public next(): Promise<BasicOrJavaType | null>;
    // ================== Method next ==================
    /**
     * @return original return type: 'java.lang.Object'
     */
    public nextSync(): BasicOrJavaType | null;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    public next(): Promise<number | null>;
    /**
     * @return original return type: 'java.lang.Integer'
     */
    public nextSync(): number | null;
    // ================== Method nextInt ==================
    /**
     * @return original return type: 'int'
     */
    public nextInt(): Promise<number>;
    // ================== Method nextInt ==================
    /**
     * @return original return type: 'int'
     */
    public nextIntSync(): number;
    // ================== Method forEachRemaining ==================
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    public forEachRemaining(var0: java_util_function_IntConsumer | null): Promise<void>;
    // ================== Method forEachRemaining ==================
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    public forEachRemainingSync(var0: java_util_function_IntConsumer | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    public forEachRemaining(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    public forEachRemainingSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEachRemaining(var0: java_util_function_Consumer | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEachRemainingSync(var0: java_util_function_Consumer | null): void;
    // ================== Method remove ==================
    /**
     * @return original return type: 'void'
     */
    public remove(): Promise<void>;
    // ================== Method remove ==================
    /**
     * @return original return type: 'void'
     */
    public removeSync(): void;
    // ================== Method hasNext ==================
    /**
     * @return original return type: 'boolean'
     */
    public hasNext(): Promise<boolean>;
    // ================== Method hasNext ==================
    /**
     * @return original return type: 'boolean'
     */
    public hasNextSync(): boolean;
}

/**
 * Class java.util.PrimitiveIterator$OfInt.
 *
 * This actually imports the java class for further use.
 * The class PrimitiveIterator$OfIntClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class PrimitiveIterator$OfInt extends importClass<typeof PrimitiveIterator$OfIntClass>("java.util.PrimitiveIterator$OfInt") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default PrimitiveIterator$OfInt;