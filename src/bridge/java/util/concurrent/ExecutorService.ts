import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { List as java_util_List } from "./../List";
import { Long as java_lang_Long } from "./../../lang/Long";
import { TimeUnit as java_util_concurrent_TimeUnit } from "./TimeUnit";
import { Future as java_util_concurrent_Future } from "./Future";
import { Callable as java_util_concurrent_Callable } from "./Callable";
import { Runnable as java_lang_Runnable } from "./../../lang/Runnable";
import { Collection as java_util_Collection } from "./../Collection";

/**
 * This class just defines types, you should import ExecutorService instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ExecutorServiceClass extends JavaClass {
    // ================== Method shutdownNow ==================
    /**
     * @return original return type: 'java.util.List'
     */
    public shutdownNow(): Promise<java_util_List | null>;
    // ================== Method shutdownNow ==================
    /**
     * @return original return type: 'java.util.List'
     */
    public shutdownNowSync(): java_util_List | null;
    // ================== Method isShutdown ==================
    /**
     * @return original return type: 'boolean'
     */
    public isShutdown(): Promise<boolean>;
    // ================== Method isShutdown ==================
    /**
     * @return original return type: 'boolean'
     */
    public isShutdownSync(): boolean;
    // ================== Method isTerminated ==================
    /**
     * @return original return type: 'boolean'
     */
    public isTerminated(): Promise<boolean>;
    // ================== Method isTerminated ==================
    /**
     * @return original return type: 'boolean'
     */
    public isTerminatedSync(): boolean;
    // ================== Method awaitTermination ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'boolean'
     */
    public awaitTermination(var0: java_lang_Long | bigint | number, var1: java_util_concurrent_TimeUnit | null): Promise<boolean>;
    // ================== Method awaitTermination ==================
    /**
     * @param var0 original type: 'long'
     * @param var1 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'boolean'
     */
    public awaitTerminationSync(var0: java_lang_Long | bigint | number, var1: java_util_concurrent_TimeUnit | null): boolean;
    // ================== Method submit ==================
    /**
     * @param var0 original type: 'java.util.concurrent.Callable'
     * @return original return type: 'java.util.concurrent.Future'
     */
    public submit(var0: java_util_concurrent_Callable | null): Promise<java_util_concurrent_Future | null>;
    // ================== Method submit ==================
    /**
     * @param var0 original type: 'java.util.concurrent.Callable'
     * @return original return type: 'java.util.concurrent.Future'
     */
    public submitSync(var0: java_util_concurrent_Callable | null): java_util_concurrent_Future | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.concurrent.Future'
     */
    public submit(var0: java_lang_Runnable | null): Promise<java_util_concurrent_Future | null>;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.concurrent.Future'
     */
    public submitSync(var0: java_lang_Runnable | null): java_util_concurrent_Future | null;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.util.concurrent.Future'
     */
    public submit(var0: java_lang_Runnable | null, var1: BasicOrJavaType | null): Promise<java_util_concurrent_Future | null>;
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.util.concurrent.Future'
     */
    public submitSync(var0: java_lang_Runnable | null, var1: BasicOrJavaType | null): java_util_concurrent_Future | null;
    // ================== Method invokeAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @param var1 original type: 'long'
     * @param var2 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'java.util.List'
     */
    public invokeAll(var0: java_util_Collection | null, var1: java_lang_Long | bigint | number, var2: java_util_concurrent_TimeUnit | null): Promise<java_util_List | null>;
    // ================== Method invokeAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @param var1 original type: 'long'
     * @param var2 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'java.util.List'
     */
    public invokeAllSync(var0: java_util_Collection | null, var1: java_lang_Long | bigint | number, var2: java_util_concurrent_TimeUnit | null): java_util_List | null;
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'java.util.List'
     */
    public invokeAll(var0: java_util_Collection | null): Promise<java_util_List | null>;
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'java.util.List'
     */
    public invokeAllSync(var0: java_util_Collection | null): java_util_List | null;
    // ================== Method invokeAny ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'java.lang.Object'
     */
    public invokeAny(var0: java_util_Collection | null): Promise<BasicOrJavaType | null>;
    // ================== Method invokeAny ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'java.lang.Object'
     */
    public invokeAnySync(var0: java_util_Collection | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.Collection'
     * @param var1 original type: 'long'
     * @param var2 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'java.lang.Object'
     */
    public invokeAny(var0: java_util_Collection | null, var1: java_lang_Long | bigint | number, var2: java_util_concurrent_TimeUnit | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.util.Collection'
     * @param var1 original type: 'long'
     * @param var2 original type: 'java.util.concurrent.TimeUnit'
     * @return original return type: 'java.lang.Object'
     */
    public invokeAnySync(var0: java_util_Collection | null, var1: java_lang_Long | bigint | number, var2: java_util_concurrent_TimeUnit | null): BasicOrJavaType | null;
    // ================== Method shutdown ==================
    /**
     * @return original return type: 'void'
     */
    public shutdown(): Promise<void>;
    // ================== Method shutdown ==================
    /**
     * @return original return type: 'void'
     */
    public shutdownSync(): void;
    // ================== Method execute ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'void'
     */
    public execute(var0: java_lang_Runnable | null): Promise<void>;
    // ================== Method execute ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'void'
     */
    public executeSync(var0: java_lang_Runnable | null): void;
}

/**
 * Class java.util.concurrent.ExecutorService.
 *
 * This actually imports the java class for further use.
 * The class ExecutorServiceClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class ExecutorService extends importClass<typeof ExecutorServiceClass>("java.util.concurrent.ExecutorService") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default ExecutorService;