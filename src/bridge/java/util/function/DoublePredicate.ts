import { importClass, JavaClass } from "java-bridge";
import { Double as java_lang_Double } from "./../../lang/Double";

/**
 * This class just defines types, you should import DoublePredicate instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DoublePredicateClass extends JavaClass {
    // ================== Method negate ==================
    /**
     * @return original return type: 'java.util.function.DoublePredicate'
     */
    public negate(): Promise<DoublePredicate | null>;
    // ================== Method negate ==================
    /**
     * @return original return type: 'java.util.function.DoublePredicate'
     */
    public negateSync(): DoublePredicate | null;
    // ================== Method test ==================
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'boolean'
     */
    public test(var0: java_lang_Double | number): Promise<boolean>;
    // ================== Method test ==================
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'boolean'
     */
    public testSync(var0: java_lang_Double | number): boolean;
    // ================== Method and ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.function.DoublePredicate'
     */
    public and(var0: DoublePredicateClass | null): Promise<DoublePredicate | null>;
    // ================== Method and ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.function.DoublePredicate'
     */
    public andSync(var0: DoublePredicateClass | null): DoublePredicate | null;
    // ================== Method or ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.function.DoublePredicate'
     */
    public or(var0: DoublePredicateClass | null): Promise<DoublePredicate | null>;
    // ================== Method or ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.function.DoublePredicate'
     */
    public orSync(var0: DoublePredicateClass | null): DoublePredicate | null;
}

/**
 * Class java.util.function.DoublePredicate.
 *
 * This actually imports the java class for further use.
 * The class DoublePredicateClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class DoublePredicate extends importClass<typeof DoublePredicateClass>("java.util.function.DoublePredicate") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default DoublePredicate;