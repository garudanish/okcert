import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";

/**
 * This class just defines types, you should import Predicate instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class PredicateClass extends JavaClass {
    // ================== Method negate ==================
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    public negate(): Promise<Predicate | null>;
    // ================== Method negate ==================
    /**
     * @return original return type: 'java.util.function.Predicate'
     */
    public negateSync(): Predicate | null;
    // ================== Method isEqual ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.function.Predicate'
     */
    public static isEqual(var0: BasicOrJavaType | null): Promise<Predicate | null>;
    // ================== Method isEqual ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.function.Predicate'
     */
    public static isEqualSync(var0: BasicOrJavaType | null): Predicate | null;
    // ================== Method test ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public test(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method test ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public testSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method and ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    public and(var0: PredicateClass | null): Promise<Predicate | null>;
    // ================== Method and ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    public andSync(var0: PredicateClass | null): Predicate | null;
    // ================== Method or ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    public or(var0: PredicateClass | null): Promise<Predicate | null>;
    // ================== Method or ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.function.Predicate'
     */
    public orSync(var0: PredicateClass | null): Predicate | null;
}

/**
 * Class java.util.function.Predicate.
 *
 * This actually imports the java class for further use.
 * The class PredicateClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Predicate extends importClass<typeof PredicateClass>("java.util.function.Predicate") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default Predicate;