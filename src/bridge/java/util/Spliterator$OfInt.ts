import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { Consumer as java_util_function_Consumer } from "./function/Consumer";
import { IntConsumer as java_util_function_IntConsumer } from "./function/IntConsumer";
import { Spliterator as java_util_Spliterator } from "./Spliterator";
import { Spliterator$OfPrimitive as java_util_Spliterator$OfPrimitive } from "./Spliterator$OfPrimitive";
import { Comparator as java_util_Comparator } from "./Comparator";

/**
 * This class just defines types, you should import Spliterator$OfInt instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Spliterator$OfIntClass extends JavaClass {
    // ================== Field ORDERED ==================
    /**
     * Original type: 'int'
     */
    public static readonly ORDERED: java_lang_Integer | number;
    // ================== Field DISTINCT ==================
    /**
     * Original type: 'int'
     */
    public static readonly DISTINCT: java_lang_Integer | number;
    // ================== Field SORTED ==================
    /**
     * Original type: 'int'
     */
    public static readonly SORTED: java_lang_Integer | number;
    // ================== Field SIZED ==================
    /**
     * Original type: 'int'
     */
    public static readonly SIZED: java_lang_Integer | number;
    // ================== Field NONNULL ==================
    /**
     * Original type: 'int'
     */
    public static readonly NONNULL: java_lang_Integer | number;
    // ================== Field IMMUTABLE ==================
    /**
     * Original type: 'int'
     */
    public static readonly IMMUTABLE: java_lang_Integer | number;
    // ================== Field CONCURRENT ==================
    /**
     * Original type: 'int'
     */
    public static readonly CONCURRENT: java_lang_Integer | number;
    // ================== Field SUBSIZED ==================
    /**
     * Original type: 'int'
     */
    public static readonly SUBSIZED: java_lang_Integer | number;
    // ================== Method tryAdvance ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'boolean'
     */
    public tryAdvance(var0: java_util_function_Consumer | null): Promise<boolean>;
    // ================== Method tryAdvance ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'boolean'
     */
    public tryAdvanceSync(var0: java_util_function_Consumer | null): boolean;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'boolean'
     */
    public tryAdvance(var0: java_util_function_IntConsumer | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'boolean'
     */
    public tryAdvanceSync(var0: java_util_function_IntConsumer | null): boolean;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public tryAdvance(var0: BasicOrJavaType | null): Promise<boolean>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public tryAdvanceSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method trySplit ==================
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public trySplit(): Promise<java_util_Spliterator | null>;
    // ================== Method trySplit ==================
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public trySplitSync(): java_util_Spliterator | null;
    /**
     * @return original return type: 'java.util.Spliterator$OfPrimitive'
     */
    public trySplit(): Promise<java_util_Spliterator$OfPrimitive | null>;
    /**
     * @return original return type: 'java.util.Spliterator$OfPrimitive'
     */
    public trySplitSync(): java_util_Spliterator$OfPrimitive | null;
    /**
     * @return original return type: 'java.util.Spliterator$OfInt'
     */
    public trySplit(): Promise<Spliterator$OfInt | null>;
    /**
     * @return original return type: 'java.util.Spliterator$OfInt'
     */
    public trySplitSync(): Spliterator$OfInt | null;
    // ================== Method forEachRemaining ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEachRemaining(var0: java_util_function_Consumer | null): Promise<void>;
    // ================== Method forEachRemaining ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEachRemainingSync(var0: java_util_function_Consumer | null): void;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    public forEachRemaining(var0: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    public forEachRemainingSync(var0: BasicOrJavaType | null): void;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    public forEachRemaining(var0: java_util_function_IntConsumer | null): Promise<void>;
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    public forEachRemainingSync(var0: java_util_function_IntConsumer | null): void;
    // ================== Method estimateSize ==================
    /**
     * @return original return type: 'long'
     */
    public estimateSize(): Promise<number>;
    // ================== Method estimateSize ==================
    /**
     * @return original return type: 'long'
     */
    public estimateSizeSync(): number;
    // ================== Method getExactSizeIfKnown ==================
    /**
     * @return original return type: 'long'
     */
    public getExactSizeIfKnown(): Promise<number>;
    // ================== Method getExactSizeIfKnown ==================
    /**
     * @return original return type: 'long'
     */
    public getExactSizeIfKnownSync(): number;
    // ================== Method characteristics ==================
    /**
     * @return original return type: 'int'
     */
    public characteristics(): Promise<number>;
    // ================== Method characteristics ==================
    /**
     * @return original return type: 'int'
     */
    public characteristicsSync(): number;
    // ================== Method hasCharacteristics ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    public hasCharacteristics(var0: java_lang_Integer | number): Promise<boolean>;
    // ================== Method hasCharacteristics ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'boolean'
     */
    public hasCharacteristicsSync(var0: java_lang_Integer | number): boolean;
    // ================== Method getComparator ==================
    /**
     * @return original return type: 'java.util.Comparator'
     */
    public getComparator(): Promise<java_util_Comparator | null>;
    // ================== Method getComparator ==================
    /**
     * @return original return type: 'java.util.Comparator'
     */
    public getComparatorSync(): java_util_Comparator | null;
}

/**
 * Class java.util.Spliterator$OfInt.
 *
 * This actually imports the java class for further use.
 * The class Spliterator$OfIntClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Spliterator$OfInt extends importClass<typeof Spliterator$OfIntClass>("java.util.Spliterator$OfInt") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default Spliterator$OfInt;