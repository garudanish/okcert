import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { Integer as java_lang_Integer } from "./../lang/Integer";
import { UnaryOperator as java_util_function_UnaryOperator } from "./function/UnaryOperator";
import { Iterator as java_util_Iterator } from "./Iterator";
import { Spliterator as java_util_Spliterator } from "./Spliterator";
import { Collection as java_util_Collection } from "./Collection";
import { ListIterator as java_util_ListIterator } from "./ListIterator";
import { Comparator as java_util_Comparator } from "./Comparator";
import { Stream as java_util_stream_Stream } from "./stream/Stream";
import { Predicate as java_util_function_Predicate } from "./function/Predicate";
import { Consumer as java_util_function_Consumer } from "./function/Consumer";

/**
 * This class just defines types, you should import List instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ListClass extends JavaClass {
    // ================== Method add ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public add(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method add ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public addSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    public add(var0: java_lang_Integer | number, var1: BasicOrJavaType | null): Promise<void>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    public addSync(var0: java_lang_Integer | number, var1: BasicOrJavaType | null): void;
    // ================== Method remove ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public remove(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method remove ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public removeSync(var0: BasicOrJavaType | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.Object'
     */
    public remove(var0: java_lang_Integer | number): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.Object'
     */
    public removeSync(var0: java_lang_Integer | number): BasicOrJavaType | null;
    // ================== Method get ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.Object'
     */
    public get(var0: java_lang_Integer | number): Promise<BasicOrJavaType | null>;
    // ================== Method get ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.lang.Object'
     */
    public getSync(var0: java_lang_Integer | number): BasicOrJavaType | null;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equals(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equalsSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCode(): Promise<number>;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCodeSync(): number;
    // ================== Method indexOf ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    public indexOf(var0: BasicOrJavaType | null): Promise<number>;
    // ================== Method indexOf ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    public indexOfSync(var0: BasicOrJavaType | null): number;
    // ================== Method clear ==================
    /**
     * @return original return type: 'void'
     */
    public clear(): Promise<void>;
    // ================== Method clear ==================
    /**
     * @return original return type: 'void'
     */
    public clearSync(): void;
    // ================== Method isEmpty ==================
    /**
     * @return original return type: 'boolean'
     */
    public isEmpty(): Promise<boolean>;
    // ================== Method isEmpty ==================
    /**
     * @return original return type: 'boolean'
     */
    public isEmptySync(): boolean;
    // ================== Method lastIndexOf ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    public lastIndexOf(var0: BasicOrJavaType | null): Promise<number>;
    // ================== Method lastIndexOf ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    public lastIndexOfSync(var0: BasicOrJavaType | null): number;
    // ================== Method contains ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public contains(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method contains ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public containsSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method replaceAll ==================
    /**
     * @param var0 original type: 'java.util.function.UnaryOperator'
     * @return original return type: 'void'
     */
    public replaceAll(var0: java_util_function_UnaryOperator | null): Promise<void>;
    // ================== Method replaceAll ==================
    /**
     * @param var0 original type: 'java.util.function.UnaryOperator'
     * @return original return type: 'void'
     */
    public replaceAllSync(var0: java_util_function_UnaryOperator | null): void;
    // ================== Method size ==================
    /**
     * @return original return type: 'int'
     */
    public size(): Promise<number>;
    // ================== Method size ==================
    /**
     * @return original return type: 'int'
     */
    public sizeSync(): number;
    // ================== Method subList ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.List'
     */
    public subList(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<List | null>;
    // ================== Method subList ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.List'
     */
    public subListSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): List | null;
    // ================== Method toArray ==================
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    public toArray(): Promise<(BasicOrJavaType | null)[] | null>;
    // ================== Method toArray ==================
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    public toArraySync(): (BasicOrJavaType | null)[] | null;
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.Object[]'
     */
    public toArray(var0: (BasicOrJavaType | null)[] | null): Promise<(BasicOrJavaType | null)[] | null>;
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'java.lang.Object[]'
     */
    public toArraySync(var0: (BasicOrJavaType | null)[] | null): (BasicOrJavaType | null)[] | null;
    // ================== Method iterator ==================
    /**
     * @return original return type: 'java.util.Iterator'
     */
    public iterator(): Promise<java_util_Iterator | null>;
    // ================== Method iterator ==================
    /**
     * @return original return type: 'java.util.Iterator'
     */
    public iteratorSync(): java_util_Iterator | null;
    // ================== Method spliterator ==================
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public spliterator(): Promise<java_util_Spliterator | null>;
    // ================== Method spliterator ==================
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public spliteratorSync(): java_util_Spliterator | null;
    // ================== Method addAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public addAll(var0: java_util_Collection | null): Promise<boolean>;
    // ================== Method addAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public addAllSync(var0: java_util_Collection | null): boolean;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public addAll(var0: java_lang_Integer | number, var1: java_util_Collection | null): Promise<boolean>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public addAllSync(var0: java_lang_Integer | number, var1: java_util_Collection | null): boolean;
    // ================== Method set ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public set(var0: java_lang_Integer | number, var1: BasicOrJavaType | null): Promise<BasicOrJavaType | null>;
    // ================== Method set ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.lang.Object'
     * @return original return type: 'java.lang.Object'
     */
    public setSync(var0: java_lang_Integer | number, var1: BasicOrJavaType | null): BasicOrJavaType | null;
    // ================== Method containsAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public containsAll(var0: java_util_Collection | null): Promise<boolean>;
    // ================== Method containsAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public containsAllSync(var0: java_util_Collection | null): boolean;
    // ================== Method removeAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public removeAll(var0: java_util_Collection | null): Promise<boolean>;
    // ================== Method removeAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public removeAllSync(var0: java_util_Collection | null): boolean;
    // ================== Method retainAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public retainAll(var0: java_util_Collection | null): Promise<boolean>;
    // ================== Method retainAll ==================
    /**
     * @param var0 original type: 'java.util.Collection'
     * @return original return type: 'boolean'
     */
    public retainAllSync(var0: java_util_Collection | null): boolean;
    // ================== Method listIterator ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.util.ListIterator'
     */
    public listIterator(var0: java_lang_Integer | number): Promise<java_util_ListIterator | null>;
    // ================== Method listIterator ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.util.ListIterator'
     */
    public listIteratorSync(var0: java_lang_Integer | number): java_util_ListIterator | null;
    /**
     * @return original return type: 'java.util.ListIterator'
     */
    public listIterator(): Promise<java_util_ListIterator | null>;
    /**
     * @return original return type: 'java.util.ListIterator'
     */
    public listIteratorSync(): java_util_ListIterator | null;
    // ================== Method sort ==================
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'void'
     */
    public sort(var0: java_util_Comparator | null): Promise<void>;
    // ================== Method sort ==================
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'void'
     */
    public sortSync(var0: java_util_Comparator | null): void;
    // ================== Method stream ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public stream(): Promise<java_util_stream_Stream | null>;
    // ================== Method stream ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public streamSync(): java_util_stream_Stream | null;
    // ================== Method removeIf ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'boolean'
     */
    public removeIf(var0: java_util_function_Predicate | null): Promise<boolean>;
    // ================== Method removeIf ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'boolean'
     */
    public removeIfSync(var0: java_util_function_Predicate | null): boolean;
    // ================== Method parallelStream ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public parallelStream(): Promise<java_util_stream_Stream | null>;
    // ================== Method parallelStream ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public parallelStreamSync(): java_util_stream_Stream | null;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEach(var0: java_util_function_Consumer | null): Promise<void>;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEachSync(var0: java_util_function_Consumer | null): void;
}

/**
 * Class java.util.List.
 *
 * This actually imports the java class for further use.
 * The class ListClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class List extends importClass<typeof ListClass>("java.util.List") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default List;