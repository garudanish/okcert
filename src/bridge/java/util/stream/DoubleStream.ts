import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { DoubleSupplier as java_util_function_DoubleSupplier } from "./../function/DoubleSupplier";
import { OptionalDouble as java_util_OptionalDouble } from "./../OptionalDouble";
import { DoubleSummaryStatistics as java_util_DoubleSummaryStatistics } from "./../DoubleSummaryStatistics";
import { Stream as java_util_stream_Stream } from "./Stream";
import { IntStream as java_util_stream_IntStream } from "./IntStream";
import { DoubleToIntFunction as java_util_function_DoubleToIntFunction } from "./../function/DoubleToIntFunction";
import { LongStream as java_util_stream_LongStream } from "./LongStream";
import { DoubleToLongFunction as java_util_function_DoubleToLongFunction } from "./../function/DoubleToLongFunction";
import { DoubleFunction as java_util_function_DoubleFunction } from "./../function/DoubleFunction";
import { DoubleConsumer as java_util_function_DoubleConsumer } from "./../function/DoubleConsumer";
import { DoublePredicate as java_util_function_DoublePredicate } from "./../function/DoublePredicate";
import { DoubleStream$Builder as java_util_stream_DoubleStream$Builder } from "./DoubleStream$Builder";
import { Double as java_lang_Double } from "./../../lang/Double";
import { DoubleUnaryOperator as java_util_function_DoubleUnaryOperator } from "./../function/DoubleUnaryOperator";
import { BaseStream as java_util_stream_BaseStream } from "./BaseStream";
import { Long as java_lang_Long } from "./../../lang/Long";
import { PrimitiveIterator$OfDouble as java_util_PrimitiveIterator$OfDouble } from "./../PrimitiveIterator$OfDouble";
import { Iterator as java_util_Iterator } from "./../Iterator";
import { Spliterator$OfDouble as java_util_Spliterator$OfDouble } from "./../Spliterator$OfDouble";
import { Spliterator as java_util_Spliterator } from "./../Spliterator";
import { Supplier as java_util_function_Supplier } from "./../function/Supplier";
import { ObjDoubleConsumer as java_util_function_ObjDoubleConsumer } from "./../function/ObjDoubleConsumer";
import { BiConsumer as java_util_function_BiConsumer } from "./../function/BiConsumer";
import { DoubleBinaryOperator as java_util_function_DoubleBinaryOperator } from "./../function/DoubleBinaryOperator";
import { Runnable as java_lang_Runnable } from "./../../lang/Runnable";

/**
 * This class just defines types, you should import DoubleStream instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class DoubleStreamClass extends JavaClass {
    // ================== Method generate ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleSupplier'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static generate(var0: java_util_function_DoubleSupplier | null): Promise<DoubleStream | null>;
    // ================== Method generate ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleSupplier'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static generateSync(var0: java_util_function_DoubleSupplier | null): DoubleStream | null;
    // ================== Method average ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public average(): Promise<java_util_OptionalDouble | null>;
    // ================== Method average ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public averageSync(): java_util_OptionalDouble | null;
    // ================== Method summaryStatistics ==================
    /**
     * @return original return type: 'java.util.DoubleSummaryStatistics'
     */
    public summaryStatistics(): Promise<java_util_DoubleSummaryStatistics | null>;
    // ================== Method summaryStatistics ==================
    /**
     * @return original return type: 'java.util.DoubleSummaryStatistics'
     */
    public summaryStatisticsSync(): java_util_DoubleSummaryStatistics | null;
    // ================== Method boxed ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public boxed(): Promise<java_util_stream_Stream | null>;
    // ================== Method boxed ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public boxedSync(): java_util_stream_Stream | null;
    // ================== Method mapToInt ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleToIntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public mapToInt(var0: java_util_function_DoubleToIntFunction | null): Promise<java_util_stream_IntStream | null>;
    // ================== Method mapToInt ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleToIntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public mapToIntSync(var0: java_util_function_DoubleToIntFunction | null): java_util_stream_IntStream | null;
    // ================== Method mapToLong ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    public mapToLong(var0: java_util_function_DoubleToLongFunction | null): Promise<java_util_stream_LongStream | null>;
    // ================== Method mapToLong ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    public mapToLongSync(var0: java_util_function_DoubleToLongFunction | null): java_util_stream_LongStream | null;
    // ================== Method flatMap ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public flatMap(var0: java_util_function_DoubleFunction | null): Promise<DoubleStream | null>;
    // ================== Method flatMap ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public flatMapSync(var0: java_util_function_DoubleFunction | null): DoubleStream | null;
    // ================== Method distinct ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public distinct(): Promise<DoubleStream | null>;
    // ================== Method distinct ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public distinctSync(): DoubleStream | null;
    // ================== Method sorted ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public sorted(): Promise<DoubleStream | null>;
    // ================== Method sorted ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public sortedSync(): DoubleStream | null;
    // ================== Method forEachOrdered ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    public forEachOrdered(var0: java_util_function_DoubleConsumer | null): Promise<void>;
    // ================== Method forEachOrdered ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    public forEachOrderedSync(var0: java_util_function_DoubleConsumer | null): void;
    // ================== Method anyMatch ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    public anyMatch(var0: java_util_function_DoublePredicate | null): Promise<boolean>;
    // ================== Method anyMatch ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    public anyMatchSync(var0: java_util_function_DoublePredicate | null): boolean;
    // ================== Method allMatch ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    public allMatch(var0: java_util_function_DoublePredicate | null): Promise<boolean>;
    // ================== Method allMatch ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    public allMatchSync(var0: java_util_function_DoublePredicate | null): boolean;
    // ================== Method noneMatch ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    public noneMatch(var0: java_util_function_DoublePredicate | null): Promise<boolean>;
    // ================== Method noneMatch ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'boolean'
     */
    public noneMatchSync(var0: java_util_function_DoublePredicate | null): boolean;
    // ================== Method findFirst ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public findFirst(): Promise<java_util_OptionalDouble | null>;
    // ================== Method findFirst ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public findFirstSync(): java_util_OptionalDouble | null;
    // ================== Method findAny ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public findAny(): Promise<java_util_OptionalDouble | null>;
    // ================== Method findAny ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public findAnySync(): java_util_OptionalDouble | null;
    // ================== Method builder ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream$Builder'
     */
    public static builder(): Promise<java_util_stream_DoubleStream$Builder | null>;
    // ================== Method builder ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream$Builder'
     */
    public static builderSync(): java_util_stream_DoubleStream$Builder | null;
    // ================== Method iterate ==================
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static iterate(var0: java_lang_Double | number, var1: java_util_function_DoubleUnaryOperator | null): Promise<DoubleStream | null>;
    // ================== Method iterate ==================
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static iterateSync(var0: java_lang_Double | number, var1: java_util_function_DoubleUnaryOperator | null): DoubleStream | null;
    // ================== Method sequential ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public sequential(): Promise<java_util_stream_BaseStream | null>;
    // ================== Method sequential ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public sequentialSync(): java_util_stream_BaseStream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public sequential(): Promise<DoubleStream | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public sequentialSync(): DoubleStream | null;
    // ================== Method mapToObj ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    public mapToObj(var0: java_util_function_DoubleFunction | null): Promise<java_util_stream_Stream | null>;
    // ================== Method mapToObj ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    public mapToObjSync(var0: java_util_function_DoubleFunction | null): java_util_stream_Stream | null;
    // ================== Method limit ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public limit(var0: java_lang_Long | bigint | number): Promise<DoubleStream | null>;
    // ================== Method limit ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public limitSync(var0: java_lang_Long | bigint | number): DoubleStream | null;
    // ================== Method count ==================
    /**
     * @return original return type: 'long'
     */
    public count(): Promise<number>;
    // ================== Method count ==================
    /**
     * @return original return type: 'long'
     */
    public countSync(): number;
    // ================== Method min ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public min(): Promise<java_util_OptionalDouble | null>;
    // ================== Method min ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public minSync(): java_util_OptionalDouble | null;
    // ================== Method max ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public max(): Promise<java_util_OptionalDouble | null>;
    // ================== Method max ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public maxSync(): java_util_OptionalDouble | null;
    // ================== Method concat ==================
    /**
     * @param var0 original type: 'java.util.stream.DoubleStream'
     * @param var1 original type: 'java.util.stream.DoubleStream'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static concat(var0: DoubleStreamClass | null, var1: DoubleStreamClass | null): Promise<DoubleStream | null>;
    // ================== Method concat ==================
    /**
     * @param var0 original type: 'java.util.stream.DoubleStream'
     * @param var1 original type: 'java.util.stream.DoubleStream'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static concatSync(var0: DoubleStreamClass | null, var1: DoubleStreamClass | null): DoubleStream | null;
    // ================== Method toArray ==================
    /**
     * @return original return type: 'double[]'
     */
    public toArray(): Promise<(number)[] | null>;
    // ================== Method toArray ==================
    /**
     * @return original return type: 'double[]'
     */
    public toArraySync(): (number)[] | null;
    // ================== Method iterator ==================
    /**
     * @return original return type: 'java.util.PrimitiveIterator$OfDouble'
     */
    public iterator(): Promise<java_util_PrimitiveIterator$OfDouble | null>;
    // ================== Method iterator ==================
    /**
     * @return original return type: 'java.util.PrimitiveIterator$OfDouble'
     */
    public iteratorSync(): java_util_PrimitiveIterator$OfDouble | null;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    public iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    public iteratorSync(): java_util_Iterator | null;
    // ================== Method spliterator ==================
    /**
     * @return original return type: 'java.util.Spliterator$OfDouble'
     */
    public spliterator(): Promise<java_util_Spliterator$OfDouble | null>;
    // ================== Method spliterator ==================
    /**
     * @return original return type: 'java.util.Spliterator$OfDouble'
     */
    public spliteratorSync(): java_util_Spliterator$OfDouble | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public spliterator(): Promise<java_util_Spliterator | null>;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public spliteratorSync(): java_util_Spliterator | null;
    // ================== Method collect ==================
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjDoubleConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    public collect(var0: java_util_function_Supplier | null, var1: java_util_function_ObjDoubleConsumer | null, var2: java_util_function_BiConsumer | null): Promise<BasicOrJavaType | null>;
    // ================== Method collect ==================
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjDoubleConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    public collectSync(var0: java_util_function_Supplier | null, var1: java_util_function_ObjDoubleConsumer | null, var2: java_util_function_BiConsumer | null): BasicOrJavaType | null;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    public forEach(var0: java_util_function_DoubleConsumer | null): Promise<void>;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'void'
     */
    public forEachSync(var0: java_util_function_DoubleConsumer | null): void;
    // ================== Method skip ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public skip(var0: java_lang_Long | bigint | number): Promise<DoubleStream | null>;
    // ================== Method skip ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public skipSync(var0: java_lang_Long | bigint | number): DoubleStream | null;
    // ================== Method peek ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public peek(var0: java_util_function_DoubleConsumer | null): Promise<DoubleStream | null>;
    // ================== Method peek ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleConsumer'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public peekSync(var0: java_util_function_DoubleConsumer | null): DoubleStream | null;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static of(var0: java_lang_Double | number): Promise<DoubleStream | null>;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'double'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static ofSync(var0: java_lang_Double | number): DoubleStream | null;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static of(var0: (java_lang_Double | number)[] | null): Promise<DoubleStream | null>;
    /**
     * @param var0 original type: 'double[]'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static ofSync(var0: (java_lang_Double | number)[] | null): DoubleStream | null;
    // ================== Method sum ==================
    /**
     * @return original return type: 'double'
     */
    public sum(): Promise<number>;
    // ================== Method sum ==================
    /**
     * @return original return type: 'double'
     */
    public sumSync(): number;
    // ================== Method empty ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static empty(): Promise<DoubleStream | null>;
    // ================== Method empty ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public static emptySync(): DoubleStream | null;
    // ================== Method filter ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public filter(var0: java_util_function_DoublePredicate | null): Promise<DoubleStream | null>;
    // ================== Method filter ==================
    /**
     * @param var0 original type: 'java.util.function.DoublePredicate'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public filterSync(var0: java_util_function_DoublePredicate | null): DoubleStream | null;
    // ================== Method parallel ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public parallel(): Promise<java_util_stream_BaseStream | null>;
    // ================== Method parallel ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public parallelSync(): java_util_stream_BaseStream | null;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public parallel(): Promise<DoubleStream | null>;
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public parallelSync(): DoubleStream | null;
    // ================== Method map ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public map(var0: java_util_function_DoubleUnaryOperator | null): Promise<DoubleStream | null>;
    // ================== Method map ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleUnaryOperator'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public mapSync(var0: java_util_function_DoubleUnaryOperator | null): DoubleStream | null;
    // ================== Method reduce ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'java.util.OptionalDouble'
     */
    public reduce(var0: java_util_function_DoubleBinaryOperator | null): Promise<java_util_OptionalDouble | null>;
    // ================== Method reduce ==================
    /**
     * @param var0 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'java.util.OptionalDouble'
     */
    public reduceSync(var0: java_util_function_DoubleBinaryOperator | null): java_util_OptionalDouble | null;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'double'
     */
    public reduce(var0: java_lang_Double | number, var1: java_util_function_DoubleBinaryOperator | null): Promise<number>;
    /**
     * @param var0 original type: 'double'
     * @param var1 original type: 'java.util.function.DoubleBinaryOperator'
     * @return original return type: 'double'
     */
    public reduceSync(var0: java_lang_Double | number, var1: java_util_function_DoubleBinaryOperator | null): number;
    // ================== Method isParallel ==================
    /**
     * @return original return type: 'boolean'
     */
    public isParallel(): Promise<boolean>;
    // ================== Method isParallel ==================
    /**
     * @return original return type: 'boolean'
     */
    public isParallelSync(): boolean;
    // ================== Method onClose ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public onClose(var0: java_lang_Runnable | null): Promise<java_util_stream_BaseStream | null>;
    // ================== Method onClose ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public onCloseSync(var0: java_lang_Runnable | null): java_util_stream_BaseStream | null;
    // ================== Method unordered ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public unordered(): Promise<java_util_stream_BaseStream | null>;
    // ================== Method unordered ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public unorderedSync(): java_util_stream_BaseStream | null;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public close(): Promise<void>;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public closeSync(): void;
}

/**
 * Class java.util.stream.DoubleStream.
 *
 * This actually imports the java class for further use.
 * The class DoubleStreamClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class DoubleStream extends importClass<typeof DoubleStreamClass>("java.util.stream.DoubleStream") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default DoubleStream;