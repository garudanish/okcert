import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { Supplier as java_util_function_Supplier } from "./../function/Supplier";
import { IntStream as java_util_stream_IntStream } from "./IntStream";
import { ToIntFunction as java_util_function_ToIntFunction } from "./../function/ToIntFunction";
import { LongStream as java_util_stream_LongStream } from "./LongStream";
import { ToLongFunction as java_util_function_ToLongFunction } from "./../function/ToLongFunction";
import { DoubleStream as java_util_stream_DoubleStream } from "./DoubleStream";
import { ToDoubleFunction as java_util_function_ToDoubleFunction } from "./../function/ToDoubleFunction";
import { Function as java_util_function_Function } from "./../function/Function";
import { Comparator as java_util_Comparator } from "./../Comparator";
import { Consumer as java_util_function_Consumer } from "./../function/Consumer";
import { Predicate as java_util_function_Predicate } from "./../function/Predicate";
import { Optional as java_util_Optional } from "./../Optional";
import { Stream$Builder as java_util_stream_Stream$Builder } from "./Stream$Builder";
import { UnaryOperator as java_util_function_UnaryOperator } from "./../function/UnaryOperator";
import { Long as java_lang_Long } from "./../../lang/Long";
import { IntFunction as java_util_function_IntFunction } from "./../function/IntFunction";
import { Collector as java_util_stream_Collector } from "./Collector";
import { BiConsumer as java_util_function_BiConsumer } from "./../function/BiConsumer";
import { BinaryOperator as java_util_function_BinaryOperator } from "./../function/BinaryOperator";
import { BiFunction as java_util_function_BiFunction } from "./../function/BiFunction";
import { BaseStream as java_util_stream_BaseStream } from "./BaseStream";
import { Runnable as java_lang_Runnable } from "./../../lang/Runnable";
import { Iterator as java_util_Iterator } from "./../Iterator";
import { Spliterator as java_util_Spliterator } from "./../Spliterator";

/**
 * This class just defines types, you should import Stream instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class StreamClass extends JavaClass {
    // ================== Method generate ==================
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static generate(var0: java_util_function_Supplier | null): Promise<Stream | null>;
    // ================== Method generate ==================
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static generateSync(var0: java_util_function_Supplier | null): Stream | null;
    // ================== Method mapToInt ==================
    /**
     * @param var0 original type: 'java.util.function.ToIntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public mapToInt(var0: java_util_function_ToIntFunction | null): Promise<java_util_stream_IntStream | null>;
    // ================== Method mapToInt ==================
    /**
     * @param var0 original type: 'java.util.function.ToIntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public mapToIntSync(var0: java_util_function_ToIntFunction | null): java_util_stream_IntStream | null;
    // ================== Method mapToLong ==================
    /**
     * @param var0 original type: 'java.util.function.ToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    public mapToLong(var0: java_util_function_ToLongFunction | null): Promise<java_util_stream_LongStream | null>;
    // ================== Method mapToLong ==================
    /**
     * @param var0 original type: 'java.util.function.ToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    public mapToLongSync(var0: java_util_function_ToLongFunction | null): java_util_stream_LongStream | null;
    // ================== Method mapToDouble ==================
    /**
     * @param var0 original type: 'java.util.function.ToDoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public mapToDouble(var0: java_util_function_ToDoubleFunction | null): Promise<java_util_stream_DoubleStream | null>;
    // ================== Method mapToDouble ==================
    /**
     * @param var0 original type: 'java.util.function.ToDoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public mapToDoubleSync(var0: java_util_function_ToDoubleFunction | null): java_util_stream_DoubleStream | null;
    // ================== Method flatMap ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.Stream'
     */
    public flatMap(var0: java_util_function_Function | null): Promise<Stream | null>;
    // ================== Method flatMap ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.Stream'
     */
    public flatMapSync(var0: java_util_function_Function | null): Stream | null;
    // ================== Method flatMapToInt ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public flatMapToInt(var0: java_util_function_Function | null): Promise<java_util_stream_IntStream | null>;
    // ================== Method flatMapToInt ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public flatMapToIntSync(var0: java_util_function_Function | null): java_util_stream_IntStream | null;
    // ================== Method flatMapToLong ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.LongStream'
     */
    public flatMapToLong(var0: java_util_function_Function | null): Promise<java_util_stream_LongStream | null>;
    // ================== Method flatMapToLong ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.LongStream'
     */
    public flatMapToLongSync(var0: java_util_function_Function | null): java_util_stream_LongStream | null;
    // ================== Method flatMapToDouble ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public flatMapToDouble(var0: java_util_function_Function | null): Promise<java_util_stream_DoubleStream | null>;
    // ================== Method flatMapToDouble ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public flatMapToDoubleSync(var0: java_util_function_Function | null): java_util_stream_DoubleStream | null;
    // ================== Method distinct ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public distinct(): Promise<Stream | null>;
    // ================== Method distinct ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public distinctSync(): Stream | null;
    // ================== Method sorted ==================
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.stream.Stream'
     */
    public sorted(var0: java_util_Comparator | null): Promise<Stream | null>;
    // ================== Method sorted ==================
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.stream.Stream'
     */
    public sortedSync(var0: java_util_Comparator | null): Stream | null;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public sorted(): Promise<Stream | null>;
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public sortedSync(): Stream | null;
    // ================== Method forEachOrdered ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEachOrdered(var0: java_util_function_Consumer | null): Promise<void>;
    // ================== Method forEachOrdered ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEachOrderedSync(var0: java_util_function_Consumer | null): void;
    // ================== Method anyMatch ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'boolean'
     */
    public anyMatch(var0: java_util_function_Predicate | null): Promise<boolean>;
    // ================== Method anyMatch ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'boolean'
     */
    public anyMatchSync(var0: java_util_function_Predicate | null): boolean;
    // ================== Method allMatch ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'boolean'
     */
    public allMatch(var0: java_util_function_Predicate | null): Promise<boolean>;
    // ================== Method allMatch ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'boolean'
     */
    public allMatchSync(var0: java_util_function_Predicate | null): boolean;
    // ================== Method noneMatch ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'boolean'
     */
    public noneMatch(var0: java_util_function_Predicate | null): Promise<boolean>;
    // ================== Method noneMatch ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'boolean'
     */
    public noneMatchSync(var0: java_util_function_Predicate | null): boolean;
    // ================== Method findFirst ==================
    /**
     * @return original return type: 'java.util.Optional'
     */
    public findFirst(): Promise<java_util_Optional | null>;
    // ================== Method findFirst ==================
    /**
     * @return original return type: 'java.util.Optional'
     */
    public findFirstSync(): java_util_Optional | null;
    // ================== Method findAny ==================
    /**
     * @return original return type: 'java.util.Optional'
     */
    public findAny(): Promise<java_util_Optional | null>;
    // ================== Method findAny ==================
    /**
     * @return original return type: 'java.util.Optional'
     */
    public findAnySync(): java_util_Optional | null;
    // ================== Method builder ==================
    /**
     * @return original return type: 'java.util.stream.Stream$Builder'
     */
    public static builder(): Promise<java_util_stream_Stream$Builder | null>;
    // ================== Method builder ==================
    /**
     * @return original return type: 'java.util.stream.Stream$Builder'
     */
    public static builderSync(): java_util_stream_Stream$Builder | null;
    // ================== Method iterate ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.UnaryOperator'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static iterate(var0: BasicOrJavaType | null, var1: java_util_function_UnaryOperator | null): Promise<Stream | null>;
    // ================== Method iterate ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.UnaryOperator'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static iterateSync(var0: BasicOrJavaType | null, var1: java_util_function_UnaryOperator | null): Stream | null;
    // ================== Method limit ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.Stream'
     */
    public limit(var0: java_lang_Long | bigint | number): Promise<Stream | null>;
    // ================== Method limit ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.Stream'
     */
    public limitSync(var0: java_lang_Long | bigint | number): Stream | null;
    // ================== Method count ==================
    /**
     * @return original return type: 'long'
     */
    public count(): Promise<number>;
    // ================== Method count ==================
    /**
     * @return original return type: 'long'
     */
    public countSync(): number;
    // ================== Method min ==================
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Optional'
     */
    public min(var0: java_util_Comparator | null): Promise<java_util_Optional | null>;
    // ================== Method min ==================
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Optional'
     */
    public minSync(var0: java_util_Comparator | null): java_util_Optional | null;
    // ================== Method max ==================
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Optional'
     */
    public max(var0: java_util_Comparator | null): Promise<java_util_Optional | null>;
    // ================== Method max ==================
    /**
     * @param var0 original type: 'java.util.Comparator'
     * @return original return type: 'java.util.Optional'
     */
    public maxSync(var0: java_util_Comparator | null): java_util_Optional | null;
    // ================== Method concat ==================
    /**
     * @param var0 original type: 'java.util.stream.Stream'
     * @param var1 original type: 'java.util.stream.Stream'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static concat(var0: StreamClass | null, var1: StreamClass | null): Promise<Stream | null>;
    // ================== Method concat ==================
    /**
     * @param var0 original type: 'java.util.stream.Stream'
     * @param var1 original type: 'java.util.stream.Stream'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static concatSync(var0: StreamClass | null, var1: StreamClass | null): Stream | null;
    // ================== Method toArray ==================
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    public toArray(): Promise<(BasicOrJavaType | null)[] | null>;
    // ================== Method toArray ==================
    /**
     * @return original return type: 'java.lang.Object[]'
     */
    public toArraySync(): (BasicOrJavaType | null)[] | null;
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.lang.Object[]'
     */
    public toArray(var0: java_util_function_IntFunction | null): Promise<(BasicOrJavaType | null)[] | null>;
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.lang.Object[]'
     */
    public toArraySync(var0: java_util_function_IntFunction | null): (BasicOrJavaType | null)[] | null;
    // ================== Method collect ==================
    /**
     * @param var0 original type: 'java.util.stream.Collector'
     * @return original return type: 'java.lang.Object'
     */
    public collect(var0: java_util_stream_Collector | null): Promise<BasicOrJavaType | null>;
    // ================== Method collect ==================
    /**
     * @param var0 original type: 'java.util.stream.Collector'
     * @return original return type: 'java.lang.Object'
     */
    public collectSync(var0: java_util_stream_Collector | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    public collect(var0: java_util_function_Supplier | null, var1: java_util_function_BiConsumer | null, var2: java_util_function_BiConsumer | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    public collectSync(var0: java_util_function_Supplier | null, var1: java_util_function_BiConsumer | null, var2: java_util_function_BiConsumer | null): BasicOrJavaType | null;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEach(var0: java_util_function_Consumer | null): Promise<void>;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'void'
     */
    public forEachSync(var0: java_util_function_Consumer | null): void;
    // ================== Method skip ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.Stream'
     */
    public skip(var0: java_lang_Long | bigint | number): Promise<Stream | null>;
    // ================== Method skip ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.Stream'
     */
    public skipSync(var0: java_lang_Long | bigint | number): Stream | null;
    // ================== Method peek ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'java.util.stream.Stream'
     */
    public peek(var0: java_util_function_Consumer | null): Promise<Stream | null>;
    // ================== Method peek ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'java.util.stream.Stream'
     */
    public peekSync(var0: java_util_function_Consumer | null): Stream | null;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static of(var0: (BasicOrJavaType | null)[] | null): Promise<Stream | null>;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'java.lang.Object[]'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static ofSync(var0: (BasicOrJavaType | null)[] | null): Stream | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static of(var0: BasicOrJavaType | null): Promise<Stream | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.stream.Stream'
     */
    public static ofSync(var0: BasicOrJavaType | null): Stream | null;
    // ================== Method empty ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public static empty(): Promise<Stream | null>;
    // ================== Method empty ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public static emptySync(): Stream | null;
    // ================== Method filter ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.stream.Stream'
     */
    public filter(var0: java_util_function_Predicate | null): Promise<Stream | null>;
    // ================== Method filter ==================
    /**
     * @param var0 original type: 'java.util.function.Predicate'
     * @return original return type: 'java.util.stream.Stream'
     */
    public filterSync(var0: java_util_function_Predicate | null): Stream | null;
    // ================== Method map ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.Stream'
     */
    public map(var0: java_util_function_Function | null): Promise<Stream | null>;
    // ================== Method map ==================
    /**
     * @param var0 original type: 'java.util.function.Function'
     * @return original return type: 'java.util.stream.Stream'
     */
    public mapSync(var0: java_util_function_Function | null): Stream | null;
    // ================== Method reduce ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BinaryOperator'
     * @return original return type: 'java.lang.Object'
     */
    public reduce(var0: BasicOrJavaType | null, var1: java_util_function_BinaryOperator | null): Promise<BasicOrJavaType | null>;
    // ================== Method reduce ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BinaryOperator'
     * @return original return type: 'java.lang.Object'
     */
    public reduceSync(var0: BasicOrJavaType | null, var1: java_util_function_BinaryOperator | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @return original return type: 'java.lang.Object'
     */
    public reduce(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | null, var2: java_util_function_BinaryOperator | null): Promise<BasicOrJavaType | null>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @param var1 original type: 'java.util.function.BiFunction'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @return original return type: 'java.lang.Object'
     */
    public reduceSync(var0: BasicOrJavaType | null, var1: java_util_function_BiFunction | null, var2: java_util_function_BinaryOperator | null): BasicOrJavaType | null;
    /**
     * @param var0 original type: 'java.util.function.BinaryOperator'
     * @return original return type: 'java.util.Optional'
     */
    public reduce(var0: java_util_function_BinaryOperator | null): Promise<java_util_Optional | null>;
    /**
     * @param var0 original type: 'java.util.function.BinaryOperator'
     * @return original return type: 'java.util.Optional'
     */
    public reduceSync(var0: java_util_function_BinaryOperator | null): java_util_Optional | null;
    // ================== Method isParallel ==================
    /**
     * @return original return type: 'boolean'
     */
    public isParallel(): Promise<boolean>;
    // ================== Method isParallel ==================
    /**
     * @return original return type: 'boolean'
     */
    public isParallelSync(): boolean;
    // ================== Method onClose ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public onClose(var0: java_lang_Runnable | null): Promise<java_util_stream_BaseStream | null>;
    // ================== Method onClose ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public onCloseSync(var0: java_lang_Runnable | null): java_util_stream_BaseStream | null;
    // ================== Method sequential ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public sequential(): Promise<java_util_stream_BaseStream | null>;
    // ================== Method sequential ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public sequentialSync(): java_util_stream_BaseStream | null;
    // ================== Method unordered ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public unordered(): Promise<java_util_stream_BaseStream | null>;
    // ================== Method unordered ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public unorderedSync(): java_util_stream_BaseStream | null;
    // ================== Method iterator ==================
    /**
     * @return original return type: 'java.util.Iterator'
     */
    public iterator(): Promise<java_util_Iterator | null>;
    // ================== Method iterator ==================
    /**
     * @return original return type: 'java.util.Iterator'
     */
    public iteratorSync(): java_util_Iterator | null;
    // ================== Method spliterator ==================
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public spliterator(): Promise<java_util_Spliterator | null>;
    // ================== Method spliterator ==================
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public spliteratorSync(): java_util_Spliterator | null;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public close(): Promise<void>;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public closeSync(): void;
    // ================== Method parallel ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public parallel(): Promise<java_util_stream_BaseStream | null>;
    // ================== Method parallel ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public parallelSync(): java_util_stream_BaseStream | null;
}

/**
 * Class java.util.stream.Stream.
 *
 * This actually imports the java class for further use.
 * The class StreamClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Stream extends importClass<typeof StreamClass>("java.util.stream.Stream") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default Stream;