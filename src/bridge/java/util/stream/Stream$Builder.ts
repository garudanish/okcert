import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { Stream as java_util_stream_Stream } from "./Stream";
import { Consumer as java_util_function_Consumer } from "./../function/Consumer";

/**
 * This class just defines types, you should import Stream$Builder instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class Stream$BuilderClass extends JavaClass {
    // ================== Method build ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public build(): Promise<java_util_stream_Stream | null>;
    // ================== Method build ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public buildSync(): java_util_stream_Stream | null;
    // ================== Method add ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.stream.Stream$Builder'
     */
    public add(var0: BasicOrJavaType | null): Promise<Stream$Builder | null>;
    // ================== Method add ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'java.util.stream.Stream$Builder'
     */
    public addSync(var0: BasicOrJavaType | null): Stream$Builder | null;
    // ================== Method accept ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    public accept(var0: BasicOrJavaType | null): Promise<void>;
    // ================== Method accept ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'void'
     */
    public acceptSync(var0: BasicOrJavaType | null): void;
    // ================== Method andThen ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'java.util.function.Consumer'
     */
    public andThen(var0: java_util_function_Consumer | null): Promise<java_util_function_Consumer | null>;
    // ================== Method andThen ==================
    /**
     * @param var0 original type: 'java.util.function.Consumer'
     * @return original return type: 'java.util.function.Consumer'
     */
    public andThenSync(var0: java_util_function_Consumer | null): java_util_function_Consumer | null;
}

/**
 * Class java.util.stream.Stream$Builder.
 *
 * This actually imports the java class for further use.
 * The class Stream$BuilderClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Stream$Builder extends importClass<typeof Stream$BuilderClass>("java.util.stream.Stream$Builder") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default Stream$Builder;