import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { IntSupplier as java_util_function_IntSupplier } from "./../function/IntSupplier";
import { OptionalDouble as java_util_OptionalDouble } from "./../OptionalDouble";
import { IntSummaryStatistics as java_util_IntSummaryStatistics } from "./../IntSummaryStatistics";
import { LongStream as java_util_stream_LongStream } from "./LongStream";
import { DoubleStream as java_util_stream_DoubleStream } from "./DoubleStream";
import { Stream as java_util_stream_Stream } from "./Stream";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { IntToLongFunction as java_util_function_IntToLongFunction } from "./../function/IntToLongFunction";
import { IntToDoubleFunction as java_util_function_IntToDoubleFunction } from "./../function/IntToDoubleFunction";
import { IntFunction as java_util_function_IntFunction } from "./../function/IntFunction";
import { IntConsumer as java_util_function_IntConsumer } from "./../function/IntConsumer";
import { IntPredicate as java_util_function_IntPredicate } from "./../function/IntPredicate";
import { OptionalInt as java_util_OptionalInt } from "./../OptionalInt";
import { IntStream$Builder as java_util_stream_IntStream$Builder } from "./IntStream$Builder";
import { IntUnaryOperator as java_util_function_IntUnaryOperator } from "./../function/IntUnaryOperator";
import { BaseStream as java_util_stream_BaseStream } from "./BaseStream";
import { Long as java_lang_Long } from "./../../lang/Long";
import { PrimitiveIterator$OfInt as java_util_PrimitiveIterator$OfInt } from "./../PrimitiveIterator$OfInt";
import { Iterator as java_util_Iterator } from "./../Iterator";
import { Spliterator$OfInt as java_util_Spliterator$OfInt } from "./../Spliterator$OfInt";
import { Spliterator as java_util_Spliterator } from "./../Spliterator";
import { Supplier as java_util_function_Supplier } from "./../function/Supplier";
import { ObjIntConsumer as java_util_function_ObjIntConsumer } from "./../function/ObjIntConsumer";
import { BiConsumer as java_util_function_BiConsumer } from "./../function/BiConsumer";
import { IntBinaryOperator as java_util_function_IntBinaryOperator } from "./../function/IntBinaryOperator";
import { Runnable as java_lang_Runnable } from "./../../lang/Runnable";

/**
 * This class just defines types, you should import IntStream instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class IntStreamClass extends JavaClass {
    // ================== Method generate ==================
    /**
     * @param var0 original type: 'java.util.function.IntSupplier'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static generate(var0: java_util_function_IntSupplier | null): Promise<IntStream | null>;
    // ================== Method generate ==================
    /**
     * @param var0 original type: 'java.util.function.IntSupplier'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static generateSync(var0: java_util_function_IntSupplier | null): IntStream | null;
    // ================== Method average ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public average(): Promise<java_util_OptionalDouble | null>;
    // ================== Method average ==================
    /**
     * @return original return type: 'java.util.OptionalDouble'
     */
    public averageSync(): java_util_OptionalDouble | null;
    // ================== Method summaryStatistics ==================
    /**
     * @return original return type: 'java.util.IntSummaryStatistics'
     */
    public summaryStatistics(): Promise<java_util_IntSummaryStatistics | null>;
    // ================== Method summaryStatistics ==================
    /**
     * @return original return type: 'java.util.IntSummaryStatistics'
     */
    public summaryStatisticsSync(): java_util_IntSummaryStatistics | null;
    // ================== Method asLongStream ==================
    /**
     * @return original return type: 'java.util.stream.LongStream'
     */
    public asLongStream(): Promise<java_util_stream_LongStream | null>;
    // ================== Method asLongStream ==================
    /**
     * @return original return type: 'java.util.stream.LongStream'
     */
    public asLongStreamSync(): java_util_stream_LongStream | null;
    // ================== Method asDoubleStream ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public asDoubleStream(): Promise<java_util_stream_DoubleStream | null>;
    // ================== Method asDoubleStream ==================
    /**
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public asDoubleStreamSync(): java_util_stream_DoubleStream | null;
    // ================== Method boxed ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public boxed(): Promise<java_util_stream_Stream | null>;
    // ================== Method boxed ==================
    /**
     * @return original return type: 'java.util.stream.Stream'
     */
    public boxedSync(): java_util_stream_Stream | null;
    // ================== Method rangeClosed ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static rangeClosed(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<IntStream | null>;
    // ================== Method rangeClosed ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static rangeClosedSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): IntStream | null;
    // ================== Method mapToLong ==================
    /**
     * @param var0 original type: 'java.util.function.IntToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    public mapToLong(var0: java_util_function_IntToLongFunction | null): Promise<java_util_stream_LongStream | null>;
    // ================== Method mapToLong ==================
    /**
     * @param var0 original type: 'java.util.function.IntToLongFunction'
     * @return original return type: 'java.util.stream.LongStream'
     */
    public mapToLongSync(var0: java_util_function_IntToLongFunction | null): java_util_stream_LongStream | null;
    // ================== Method mapToDouble ==================
    /**
     * @param var0 original type: 'java.util.function.IntToDoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public mapToDouble(var0: java_util_function_IntToDoubleFunction | null): Promise<java_util_stream_DoubleStream | null>;
    // ================== Method mapToDouble ==================
    /**
     * @param var0 original type: 'java.util.function.IntToDoubleFunction'
     * @return original return type: 'java.util.stream.DoubleStream'
     */
    public mapToDoubleSync(var0: java_util_function_IntToDoubleFunction | null): java_util_stream_DoubleStream | null;
    // ================== Method flatMap ==================
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public flatMap(var0: java_util_function_IntFunction | null): Promise<IntStream | null>;
    // ================== Method flatMap ==================
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public flatMapSync(var0: java_util_function_IntFunction | null): IntStream | null;
    // ================== Method distinct ==================
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public distinct(): Promise<IntStream | null>;
    // ================== Method distinct ==================
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public distinctSync(): IntStream | null;
    // ================== Method sorted ==================
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public sorted(): Promise<IntStream | null>;
    // ================== Method sorted ==================
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public sortedSync(): IntStream | null;
    // ================== Method forEachOrdered ==================
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    public forEachOrdered(var0: java_util_function_IntConsumer | null): Promise<void>;
    // ================== Method forEachOrdered ==================
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    public forEachOrderedSync(var0: java_util_function_IntConsumer | null): void;
    // ================== Method anyMatch ==================
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    public anyMatch(var0: java_util_function_IntPredicate | null): Promise<boolean>;
    // ================== Method anyMatch ==================
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    public anyMatchSync(var0: java_util_function_IntPredicate | null): boolean;
    // ================== Method allMatch ==================
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    public allMatch(var0: java_util_function_IntPredicate | null): Promise<boolean>;
    // ================== Method allMatch ==================
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    public allMatchSync(var0: java_util_function_IntPredicate | null): boolean;
    // ================== Method noneMatch ==================
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    public noneMatch(var0: java_util_function_IntPredicate | null): Promise<boolean>;
    // ================== Method noneMatch ==================
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'boolean'
     */
    public noneMatchSync(var0: java_util_function_IntPredicate | null): boolean;
    // ================== Method findFirst ==================
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    public findFirst(): Promise<java_util_OptionalInt | null>;
    // ================== Method findFirst ==================
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    public findFirstSync(): java_util_OptionalInt | null;
    // ================== Method findAny ==================
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    public findAny(): Promise<java_util_OptionalInt | null>;
    // ================== Method findAny ==================
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    public findAnySync(): java_util_OptionalInt | null;
    // ================== Method builder ==================
    /**
     * @return original return type: 'java.util.stream.IntStream$Builder'
     */
    public static builder(): Promise<java_util_stream_IntStream$Builder | null>;
    // ================== Method builder ==================
    /**
     * @return original return type: 'java.util.stream.IntStream$Builder'
     */
    public static builderSync(): java_util_stream_IntStream$Builder | null;
    // ================== Method iterate ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static iterate(var0: java_lang_Integer | number, var1: java_util_function_IntUnaryOperator | null): Promise<IntStream | null>;
    // ================== Method iterate ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static iterateSync(var0: java_lang_Integer | number, var1: java_util_function_IntUnaryOperator | null): IntStream | null;
    // ================== Method sequential ==================
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public sequential(): Promise<IntStream | null>;
    // ================== Method sequential ==================
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public sequentialSync(): IntStream | null;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public sequential(): Promise<java_util_stream_BaseStream | null>;
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public sequentialSync(): java_util_stream_BaseStream | null;
    // ================== Method mapToObj ==================
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    public mapToObj(var0: java_util_function_IntFunction | null): Promise<java_util_stream_Stream | null>;
    // ================== Method mapToObj ==================
    /**
     * @param var0 original type: 'java.util.function.IntFunction'
     * @return original return type: 'java.util.stream.Stream'
     */
    public mapToObjSync(var0: java_util_function_IntFunction | null): java_util_stream_Stream | null;
    // ================== Method limit ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public limit(var0: java_lang_Long | bigint | number): Promise<IntStream | null>;
    // ================== Method limit ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public limitSync(var0: java_lang_Long | bigint | number): IntStream | null;
    // ================== Method count ==================
    /**
     * @return original return type: 'long'
     */
    public count(): Promise<number>;
    // ================== Method count ==================
    /**
     * @return original return type: 'long'
     */
    public countSync(): number;
    // ================== Method min ==================
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    public min(): Promise<java_util_OptionalInt | null>;
    // ================== Method min ==================
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    public minSync(): java_util_OptionalInt | null;
    // ================== Method max ==================
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    public max(): Promise<java_util_OptionalInt | null>;
    // ================== Method max ==================
    /**
     * @return original return type: 'java.util.OptionalInt'
     */
    public maxSync(): java_util_OptionalInt | null;
    // ================== Method concat ==================
    /**
     * @param var0 original type: 'java.util.stream.IntStream'
     * @param var1 original type: 'java.util.stream.IntStream'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static concat(var0: IntStreamClass | null, var1: IntStreamClass | null): Promise<IntStream | null>;
    // ================== Method concat ==================
    /**
     * @param var0 original type: 'java.util.stream.IntStream'
     * @param var1 original type: 'java.util.stream.IntStream'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static concatSync(var0: IntStreamClass | null, var1: IntStreamClass | null): IntStream | null;
    // ================== Method toArray ==================
    /**
     * @return original return type: 'int[]'
     */
    public toArray(): Promise<(number)[] | null>;
    // ================== Method toArray ==================
    /**
     * @return original return type: 'int[]'
     */
    public toArraySync(): (number)[] | null;
    // ================== Method iterator ==================
    /**
     * @return original return type: 'java.util.PrimitiveIterator$OfInt'
     */
    public iterator(): Promise<java_util_PrimitiveIterator$OfInt | null>;
    // ================== Method iterator ==================
    /**
     * @return original return type: 'java.util.PrimitiveIterator$OfInt'
     */
    public iteratorSync(): java_util_PrimitiveIterator$OfInt | null;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    public iterator(): Promise<java_util_Iterator | null>;
    /**
     * @return original return type: 'java.util.Iterator'
     */
    public iteratorSync(): java_util_Iterator | null;
    // ================== Method spliterator ==================
    /**
     * @return original return type: 'java.util.Spliterator$OfInt'
     */
    public spliterator(): Promise<java_util_Spliterator$OfInt | null>;
    // ================== Method spliterator ==================
    /**
     * @return original return type: 'java.util.Spliterator$OfInt'
     */
    public spliteratorSync(): java_util_Spliterator$OfInt | null;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public spliterator(): Promise<java_util_Spliterator | null>;
    /**
     * @return original return type: 'java.util.Spliterator'
     */
    public spliteratorSync(): java_util_Spliterator | null;
    // ================== Method collect ==================
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjIntConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    public collect(var0: java_util_function_Supplier | null, var1: java_util_function_ObjIntConsumer | null, var2: java_util_function_BiConsumer | null): Promise<BasicOrJavaType | null>;
    // ================== Method collect ==================
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.ObjIntConsumer'
     * @param var2 original type: 'java.util.function.BiConsumer'
     * @return original return type: 'java.lang.Object'
     */
    public collectSync(var0: java_util_function_Supplier | null, var1: java_util_function_ObjIntConsumer | null, var2: java_util_function_BiConsumer | null): BasicOrJavaType | null;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    public forEach(var0: java_util_function_IntConsumer | null): Promise<void>;
    // ================== Method forEach ==================
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'void'
     */
    public forEachSync(var0: java_util_function_IntConsumer | null): void;
    // ================== Method skip ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public skip(var0: java_lang_Long | bigint | number): Promise<IntStream | null>;
    // ================== Method skip ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public skipSync(var0: java_lang_Long | bigint | number): IntStream | null;
    // ================== Method peek ==================
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public peek(var0: java_util_function_IntConsumer | null): Promise<IntStream | null>;
    // ================== Method peek ==================
    /**
     * @param var0 original type: 'java.util.function.IntConsumer'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public peekSync(var0: java_util_function_IntConsumer | null): IntStream | null;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static of(var0: (java_lang_Integer | number)[] | null): Promise<IntStream | null>;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'int[]'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static ofSync(var0: (java_lang_Integer | number)[] | null): IntStream | null;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static of(var0: java_lang_Integer | number): Promise<IntStream | null>;
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static ofSync(var0: java_lang_Integer | number): IntStream | null;
    // ================== Method sum ==================
    /**
     * @return original return type: 'int'
     */
    public sum(): Promise<number>;
    // ================== Method sum ==================
    /**
     * @return original return type: 'int'
     */
    public sumSync(): number;
    // ================== Method empty ==================
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static empty(): Promise<IntStream | null>;
    // ================== Method empty ==================
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static emptySync(): IntStream | null;
    // ================== Method filter ==================
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public filter(var0: java_util_function_IntPredicate | null): Promise<IntStream | null>;
    // ================== Method filter ==================
    /**
     * @param var0 original type: 'java.util.function.IntPredicate'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public filterSync(var0: java_util_function_IntPredicate | null): IntStream | null;
    // ================== Method range ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static range(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<IntStream | null>;
    // ================== Method range ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public static rangeSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): IntStream | null;
    // ================== Method parallel ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public parallel(): Promise<java_util_stream_BaseStream | null>;
    // ================== Method parallel ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public parallelSync(): java_util_stream_BaseStream | null;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public parallel(): Promise<IntStream | null>;
    /**
     * @return original return type: 'java.util.stream.IntStream'
     */
    public parallelSync(): IntStream | null;
    // ================== Method map ==================
    /**
     * @param var0 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public map(var0: java_util_function_IntUnaryOperator | null): Promise<IntStream | null>;
    // ================== Method map ==================
    /**
     * @param var0 original type: 'java.util.function.IntUnaryOperator'
     * @return original return type: 'java.util.stream.IntStream'
     */
    public mapSync(var0: java_util_function_IntUnaryOperator | null): IntStream | null;
    // ================== Method reduce ==================
    /**
     * @param var0 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'java.util.OptionalInt'
     */
    public reduce(var0: java_util_function_IntBinaryOperator | null): Promise<java_util_OptionalInt | null>;
    // ================== Method reduce ==================
    /**
     * @param var0 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'java.util.OptionalInt'
     */
    public reduceSync(var0: java_util_function_IntBinaryOperator | null): java_util_OptionalInt | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'int'
     */
    public reduce(var0: java_lang_Integer | number, var1: java_util_function_IntBinaryOperator | null): Promise<number>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'java.util.function.IntBinaryOperator'
     * @return original return type: 'int'
     */
    public reduceSync(var0: java_lang_Integer | number, var1: java_util_function_IntBinaryOperator | null): number;
    // ================== Method isParallel ==================
    /**
     * @return original return type: 'boolean'
     */
    public isParallel(): Promise<boolean>;
    // ================== Method isParallel ==================
    /**
     * @return original return type: 'boolean'
     */
    public isParallelSync(): boolean;
    // ================== Method onClose ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public onClose(var0: java_lang_Runnable | null): Promise<java_util_stream_BaseStream | null>;
    // ================== Method onClose ==================
    /**
     * @param var0 original type: 'java.lang.Runnable'
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public onCloseSync(var0: java_lang_Runnable | null): java_util_stream_BaseStream | null;
    // ================== Method unordered ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public unordered(): Promise<java_util_stream_BaseStream | null>;
    // ================== Method unordered ==================
    /**
     * @return original return type: 'java.util.stream.BaseStream'
     */
    public unorderedSync(): java_util_stream_BaseStream | null;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public close(): Promise<void>;
    // ================== Method close ==================
    /**
     * @return original return type: 'void'
     */
    public closeSync(): void;
}

/**
 * Class java.util.stream.IntStream.
 *
 * This actually imports the java class for further use.
 * The class IntStreamClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class IntStream extends importClass<typeof IntStreamClass>("java.util.stream.IntStream") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default IntStream;