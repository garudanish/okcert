import { importClass, JavaClass } from "java-bridge";
import { Supplier as java_util_function_Supplier } from "./../function/Supplier";
import { BiConsumer as java_util_function_BiConsumer } from "./../function/BiConsumer";
import { Function as java_util_function_Function } from "./../function/Function";
import { Set as java_util_Set } from "./../Set";
import { BinaryOperator as java_util_function_BinaryOperator } from "./../function/BinaryOperator";
import { Collector$Characteristics as java_util_stream_Collector$Characteristics } from "./Collector$Characteristics";

/**
 * This class just defines types, you should import Collector instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class CollectorClass extends JavaClass {
    // ================== Method supplier ==================
    /**
     * @return original return type: 'java.util.function.Supplier'
     */
    public supplier(): Promise<java_util_function_Supplier | null>;
    // ================== Method supplier ==================
    /**
     * @return original return type: 'java.util.function.Supplier'
     */
    public supplierSync(): java_util_function_Supplier | null;
    // ================== Method accumulator ==================
    /**
     * @return original return type: 'java.util.function.BiConsumer'
     */
    public accumulator(): Promise<java_util_function_BiConsumer | null>;
    // ================== Method accumulator ==================
    /**
     * @return original return type: 'java.util.function.BiConsumer'
     */
    public accumulatorSync(): java_util_function_BiConsumer | null;
    // ================== Method finisher ==================
    /**
     * @return original return type: 'java.util.function.Function'
     */
    public finisher(): Promise<java_util_function_Function | null>;
    // ================== Method finisher ==================
    /**
     * @return original return type: 'java.util.function.Function'
     */
    public finisherSync(): java_util_function_Function | null;
    // ================== Method characteristics ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public characteristics(): Promise<java_util_Set | null>;
    // ================== Method characteristics ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public characteristicsSync(): java_util_Set | null;
    // ================== Method combiner ==================
    /**
     * @return original return type: 'java.util.function.BinaryOperator'
     */
    public combiner(): Promise<java_util_function_BinaryOperator | null>;
    // ================== Method combiner ==================
    /**
     * @return original return type: 'java.util.function.BinaryOperator'
     */
    public combinerSync(): java_util_function_BinaryOperator | null;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @param var3 original type: 'java.util.function.Function'
     * @param var4 original type: 'java.util.stream.Collector$Characteristics[]'
     * @return original return type: 'java.util.stream.Collector'
     */
    public static of(var0: java_util_function_Supplier | null, var1: java_util_function_BiConsumer | null, var2: java_util_function_BinaryOperator | null, var3: java_util_function_Function | null, var4: (java_util_stream_Collector$Characteristics | null)[] | null): Promise<Collector | null>;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @param var3 original type: 'java.util.function.Function'
     * @param var4 original type: 'java.util.stream.Collector$Characteristics[]'
     * @return original return type: 'java.util.stream.Collector'
     */
    public static ofSync(var0: java_util_function_Supplier | null, var1: java_util_function_BiConsumer | null, var2: java_util_function_BinaryOperator | null, var3: java_util_function_Function | null, var4: (java_util_stream_Collector$Characteristics | null)[] | null): Collector | null;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @param var3 original type: 'java.util.stream.Collector$Characteristics[]'
     * @return original return type: 'java.util.stream.Collector'
     */
    public static of(var0: java_util_function_Supplier | null, var1: java_util_function_BiConsumer | null, var2: java_util_function_BinaryOperator | null, var3: (java_util_stream_Collector$Characteristics | null)[] | null): Promise<Collector | null>;
    /**
     * @param var0 original type: 'java.util.function.Supplier'
     * @param var1 original type: 'java.util.function.BiConsumer'
     * @param var2 original type: 'java.util.function.BinaryOperator'
     * @param var3 original type: 'java.util.stream.Collector$Characteristics[]'
     * @return original return type: 'java.util.stream.Collector'
     */
    public static ofSync(var0: java_util_function_Supplier | null, var1: java_util_function_BiConsumer | null, var2: java_util_function_BinaryOperator | null, var3: (java_util_stream_Collector$Characteristics | null)[] | null): Collector | null;
}

/**
 * Class java.util.stream.Collector.
 *
 * This actually imports the java class for further use.
 * The class CollectorClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Collector extends importClass<typeof CollectorClass>("java.util.stream.Collector") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default Collector;