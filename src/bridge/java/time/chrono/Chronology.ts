import { importClass, JavaClass, BasicOrJavaType } from "java-bridge";
import { ChronoLocalDateTime as java_time_chrono_ChronoLocalDateTime } from "./ChronoLocalDateTime";
import { TemporalAccessor as java_time_temporal_TemporalAccessor } from "./../temporal/TemporalAccessor";
import { ChronoZonedDateTime as java_time_chrono_ChronoZonedDateTime } from "./ChronoZonedDateTime";
import { Instant as java_time_Instant } from "./../Instant";
import { ZoneId as java_time_ZoneId } from "./../ZoneId";
import { Long as java_lang_Long } from "./../../lang/Long";
import { Era as java_time_chrono_Era } from "./Era";
import { Integer as java_lang_Integer } from "./../../lang/Integer";
import { Locale as java_util_Locale } from "./../../util/Locale";
import { Set as java_util_Set } from "./../../util/Set";
import { ChronoLocalDate as java_time_chrono_ChronoLocalDate } from "./ChronoLocalDate";
import { Clock as java_time_Clock } from "./../Clock";
import { List as java_util_List } from "./../../util/List";
import { Map as java_util_Map } from "./../../util/Map";
import { ResolverStyle as java_time_format_ResolverStyle } from "./../format/ResolverStyle";
import { ChronoPeriod as java_time_chrono_ChronoPeriod } from "./ChronoPeriod";
import { ValueRange as java_time_temporal_ValueRange } from "./../temporal/ValueRange";
import { ChronoField as java_time_temporal_ChronoField } from "./../temporal/ChronoField";
import { TextStyle as java_time_format_TextStyle } from "./../format/TextStyle";

/**
 * This class just defines types, you should import Chronology instead of this.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export declare class ChronologyClass extends JavaClass {
    // ================== Method localDateTime ==================
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    public localDateTime(var0: java_time_temporal_TemporalAccessor | null): Promise<java_time_chrono_ChronoLocalDateTime | null>;
    // ================== Method localDateTime ==================
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.chrono.ChronoLocalDateTime'
     */
    public localDateTimeSync(var0: java_time_temporal_TemporalAccessor | null): java_time_chrono_ChronoLocalDateTime | null;
    // ================== Method zonedDateTime ==================
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.chrono.ChronoZonedDateTime'
     */
    public zonedDateTime(var0: java_time_temporal_TemporalAccessor | null): Promise<java_time_chrono_ChronoZonedDateTime | null>;
    // ================== Method zonedDateTime ==================
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.chrono.ChronoZonedDateTime'
     */
    public zonedDateTimeSync(var0: java_time_temporal_TemporalAccessor | null): java_time_chrono_ChronoZonedDateTime | null;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @param var1 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.chrono.ChronoZonedDateTime'
     */
    public zonedDateTime(var0: java_time_Instant | null, var1: java_time_ZoneId | null): Promise<java_time_chrono_ChronoZonedDateTime | null>;
    /**
     * @param var0 original type: 'java.time.Instant'
     * @param var1 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.chrono.ChronoZonedDateTime'
     */
    public zonedDateTimeSync(var0: java_time_Instant | null, var1: java_time_ZoneId | null): java_time_chrono_ChronoZonedDateTime | null;
    // ================== Method isLeapYear ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'boolean'
     */
    public isLeapYear(var0: java_lang_Long | bigint | number): Promise<boolean>;
    // ================== Method isLeapYear ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'boolean'
     */
    public isLeapYearSync(var0: java_lang_Long | bigint | number): boolean;
    // ================== Method eraOf ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.chrono.Era'
     */
    public eraOf(var0: java_lang_Integer | number): Promise<java_time_chrono_Era | null>;
    // ================== Method eraOf ==================
    /**
     * @param var0 original type: 'int'
     * @return original return type: 'java.time.chrono.Era'
     */
    public eraOfSync(var0: java_lang_Integer | number): java_time_chrono_Era | null;
    // ================== Method ofLocale ==================
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.time.chrono.Chronology'
     */
    public static ofLocale(var0: java_util_Locale | null): Promise<Chronology | null>;
    // ================== Method ofLocale ==================
    /**
     * @param var0 original type: 'java.util.Locale'
     * @return original return type: 'java.time.chrono.Chronology'
     */
    public static ofLocaleSync(var0: java_util_Locale | null): Chronology | null;
    // ================== Method getAvailableChronologies ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public static getAvailableChronologies(): Promise<java_util_Set | null>;
    // ================== Method getAvailableChronologies ==================
    /**
     * @return original return type: 'java.util.Set'
     */
    public static getAvailableChronologiesSync(): java_util_Set | null;
    // ================== Method getCalendarType ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getCalendarType(): Promise<string | null>;
    // ================== Method getCalendarType ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getCalendarTypeSync(): string | null;
    // ================== Method dateYearDay ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateYearDay(var0: java_lang_Integer | number, var1: java_lang_Integer | number): Promise<java_time_chrono_ChronoLocalDate | null>;
    // ================== Method dateYearDay ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateYearDaySync(var0: java_lang_Integer | number, var1: java_lang_Integer | number): java_time_chrono_ChronoLocalDate | null;
    /**
     * @param var0 original type: 'java.time.chrono.Era'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateYearDay(var0: java_time_chrono_Era | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<java_time_chrono_ChronoLocalDate | null>;
    /**
     * @param var0 original type: 'java.time.chrono.Era'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateYearDaySync(var0: java_time_chrono_Era | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number): java_time_chrono_ChronoLocalDate | null;
    // ================== Method dateEpochDay ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateEpochDay(var0: java_lang_Long | bigint | number): Promise<java_time_chrono_ChronoLocalDate | null>;
    // ================== Method dateEpochDay ==================
    /**
     * @param var0 original type: 'long'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateEpochDaySync(var0: java_lang_Long | bigint | number): java_time_chrono_ChronoLocalDate | null;
    // ================== Method dateNow ==================
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateNow(var0: java_time_ZoneId | null): Promise<java_time_chrono_ChronoLocalDate | null>;
    // ================== Method dateNow ==================
    /**
     * @param var0 original type: 'java.time.ZoneId'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateNowSync(var0: java_time_ZoneId | null): java_time_chrono_ChronoLocalDate | null;
    /**
     * @param var0 original type: 'java.time.Clock'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateNow(var0: java_time_Clock | null): Promise<java_time_chrono_ChronoLocalDate | null>;
    /**
     * @param var0 original type: 'java.time.Clock'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateNowSync(var0: java_time_Clock | null): java_time_chrono_ChronoLocalDate | null;
    /**
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateNow(): Promise<java_time_chrono_ChronoLocalDate | null>;
    /**
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateNowSync(): java_time_chrono_ChronoLocalDate | null;
    // ================== Method prolepticYear ==================
    /**
     * @param var0 original type: 'java.time.chrono.Era'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    public prolepticYear(var0: java_time_chrono_Era | null, var1: java_lang_Integer | number): Promise<number>;
    // ================== Method prolepticYear ==================
    /**
     * @param var0 original type: 'java.time.chrono.Era'
     * @param var1 original type: 'int'
     * @return original return type: 'int'
     */
    public prolepticYearSync(var0: java_time_chrono_Era | null, var1: java_lang_Integer | number): number;
    // ================== Method eras ==================
    /**
     * @return original return type: 'java.util.List'
     */
    public eras(): Promise<java_util_List | null>;
    // ================== Method eras ==================
    /**
     * @return original return type: 'java.util.List'
     */
    public erasSync(): java_util_List | null;
    // ================== Method resolveDate ==================
    /**
     * @param var0 original type: 'java.util.Map'
     * @param var1 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public resolveDate(var0: java_util_Map | null, var1: java_time_format_ResolverStyle | null): Promise<java_time_chrono_ChronoLocalDate | null>;
    // ================== Method resolveDate ==================
    /**
     * @param var0 original type: 'java.util.Map'
     * @param var1 original type: 'java.time.format.ResolverStyle'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public resolveDateSync(var0: java_util_Map | null, var1: java_time_format_ResolverStyle | null): java_time_chrono_ChronoLocalDate | null;
    // ================== Method period ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    public period(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<java_time_chrono_ChronoPeriod | null>;
    // ================== Method period ==================
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoPeriod'
     */
    public periodSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): java_time_chrono_ChronoPeriod | null;
    // ================== Method from ==================
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.chrono.Chronology'
     */
    public static from(var0: java_time_temporal_TemporalAccessor | null): Promise<Chronology | null>;
    // ================== Method from ==================
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.chrono.Chronology'
     */
    public static fromSync(var0: java_time_temporal_TemporalAccessor | null): Chronology | null;
    // ================== Method date ==================
    /**
     * @param var0 original type: 'java.time.chrono.Era'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public date(var0: java_time_chrono_Era | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): Promise<java_time_chrono_ChronoLocalDate | null>;
    // ================== Method date ==================
    /**
     * @param var0 original type: 'java.time.chrono.Era'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @param var3 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateSync(var0: java_time_chrono_Era | null, var1: java_lang_Integer | number, var2: java_lang_Integer | number, var3: java_lang_Integer | number): java_time_chrono_ChronoLocalDate | null;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public date(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): Promise<java_time_chrono_ChronoLocalDate | null>;
    /**
     * @param var0 original type: 'int'
     * @param var1 original type: 'int'
     * @param var2 original type: 'int'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateSync(var0: java_lang_Integer | number, var1: java_lang_Integer | number, var2: java_lang_Integer | number): java_time_chrono_ChronoLocalDate | null;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public date(var0: java_time_temporal_TemporalAccessor | null): Promise<java_time_chrono_ChronoLocalDate | null>;
    /**
     * @param var0 original type: 'java.time.temporal.TemporalAccessor'
     * @return original return type: 'java.time.chrono.ChronoLocalDate'
     */
    public dateSync(var0: java_time_temporal_TemporalAccessor | null): java_time_chrono_ChronoLocalDate | null;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equals(var0: BasicOrJavaType | null): Promise<boolean>;
    // ================== Method equals ==================
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'boolean'
     */
    public equalsSync(var0: BasicOrJavaType | null): boolean;
    // ================== Method toString ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public toString(): Promise<string>;
    // ================== Method toString ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public toStringSync(): string;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCode(): Promise<number>;
    // ================== Method hashCode ==================
    /**
     * @return original return type: 'int'
     */
    public hashCodeSync(): number;
    // ================== Method compareTo ==================
    /**
     * @param var0 original type: 'java.time.chrono.Chronology'
     * @return original return type: 'int'
     */
    public compareTo(var0: ChronologyClass | null): Promise<number>;
    // ================== Method compareTo ==================
    /**
     * @param var0 original type: 'java.time.chrono.Chronology'
     * @return original return type: 'int'
     */
    public compareToSync(var0: ChronologyClass | null): number;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    public compareTo(var0: BasicOrJavaType | null): Promise<number>;
    /**
     * @param var0 original type: 'java.lang.Object'
     * @return original return type: 'int'
     */
    public compareToSync(var0: BasicOrJavaType | null): number;
    // ================== Method getId ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getId(): Promise<string | null>;
    // ================== Method getId ==================
    /**
     * @return original return type: 'java.lang.String'
     */
    public getIdSync(): string | null;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.time.chrono.Chronology'
     */
    public static of(var0: string | null): Promise<Chronology | null>;
    // ================== Method of ==================
    /**
     * @param var0 original type: 'java.lang.String'
     * @return original return type: 'java.time.chrono.Chronology'
     */
    public static ofSync(var0: string | null): Chronology | null;
    // ================== Method range ==================
    /**
     * @param var0 original type: 'java.time.temporal.ChronoField'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    public range(var0: java_time_temporal_ChronoField | null): Promise<java_time_temporal_ValueRange | null>;
    // ================== Method range ==================
    /**
     * @param var0 original type: 'java.time.temporal.ChronoField'
     * @return original return type: 'java.time.temporal.ValueRange'
     */
    public rangeSync(var0: java_time_temporal_ChronoField | null): java_time_temporal_ValueRange | null;
    // ================== Method getDisplayName ==================
    /**
     * @param var0 original type: 'java.time.format.TextStyle'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    public getDisplayName(var0: java_time_format_TextStyle | null, var1: java_util_Locale | null): Promise<string | null>;
    // ================== Method getDisplayName ==================
    /**
     * @param var0 original type: 'java.time.format.TextStyle'
     * @param var1 original type: 'java.util.Locale'
     * @return original return type: 'java.lang.String'
     */
    public getDisplayNameSync(var0: java_time_format_TextStyle | null, var1: java_util_Locale | null): string | null;
}

/**
 * Class java.time.chrono.Chronology.
 *
 * This actually imports the java class for further use.
 * The class ChronologyClass only defines types, this is the class you should actually import.
 * Please note that this statement imports the underlying java class at runtime, which may take a while.
 * This was generated by java-bridge.
 * You should probably not edit this.
 */
export class Chronology extends importClass<typeof ChronologyClass>("java.time.chrono.Chronology") {
    /**
     * Private constructor to prevent instantiation
     * as this is either an abstract class or an interface
     */
    private constructor() {
        super();
    }
}
export default Chronology;